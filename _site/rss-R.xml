<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Educate-R - R</title>
		<description>Posts categorized as 'R'</description>
		<link>http://educate-r.org</link>
		<atom:link href="http://educate-r.org/feed.category.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Format Markdown Documents in R</title>
				<description>&lt;p&gt;Have you ever used a markdown file to create an html file?  Have you ever wanted to quickly format the subsequent html file to add some color or other aspects?  If your answer is yes to both of those questions, this package may be of interest to you.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href=&quot;https://github.com/lebebr01/highlightHTML&quot;&gt;highlightHTML&lt;/a&gt;&lt;/strong&gt; package aims to develop a flexible approach to add formatting to an html document by injecting CSS into the file.  To do this, tags are created within the markdown document telling the R routine where to look for these tags.  If you are familiar with the Twitterverse, this package will be equally comfortable.  The tags take the form of the hashtags on Twitter.  As an example, #bgblue, would be a command to change the background to blue.&lt;/p&gt;

&lt;p&gt;The next thing needed by the package is to tell how much of the word, sentence, or header that should be affected by the tag.  To do this, add braces before the tag and include all the content you want to be affected by the tag.  For example, {#bggold this example will have a blue background}.&lt;/p&gt;

&lt;p&gt;Once any tags you want to include are in the markdown document, then the document can be converted into a html file using programs such as &lt;em&gt;knitr&lt;/em&gt;, &lt;em&gt;pandoc&lt;/em&gt;, the RStudio &quot;knit HTML&quot; button (or any others).  Once the resulting html file is compiled, then run the html file through the &lt;strong&gt;highlightHTML&lt;/strong&gt; package and the html file is searched for the tags, the tags are changed to CSS ids, and by default the CSS tags will be inserted automatically back into the document.&lt;/p&gt;

&lt;h3&gt;Minimal Example&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;A markdown document that looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;# Test of {#colgold highlightHTML} package

Can highlight {#bgblack multiple words}.

Even tables:

| Color Name | Number     |  
|------------|------------|  
| Blue       | 5  #bgblue |  
| Green      | 35         |  
| Orange     | 100        |  
| Red        | 200 #bgred |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You would then convert the markdown above into a html file (I hit the knit HTML button in RStudio for this file), then run the following commands in R (assuming the highlightHTML package is not installed):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(devtools)
install_github(repo = &quot;highlightHTML&quot;, username = &quot;lebebr01&quot;)
library(highlightHTML)

tags &amp;lt;- c(&quot;#bgred {background-color: red;}&quot;, &quot;#bgblue {background-color: blue;}&quot;,
          &quot;#colgold {color: gold;}&quot;, &quot;#bgblack {background-color: black; color: white;}&quot;)
highlightHTML(input = &quot;path/to/infile.html&quot;, output = &quot;path/to/outfile.html&quot;, 
              updateCSS = TRUE, tags = tags, browse = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will process the html file, look for tags, change the tags to CSS ids, inject the CSS into the document, and lastly open the output file in the browser to see how it looks.  The example above would look like the following after the above commands:
&lt;img src=&quot;figs/mwe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also go to this link to see the post-processed file: &lt;a href=&quot;educate-r.org/mwe.html&quot;&gt;educate-r.org/mwe.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Upcoming Features&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Currently the package assumes that you know CSS and can supply your own tags.  In the future I&#39;d like to relax this and allow for some basic tags that work without needing to supply the CSS.  I&#39;m hoping to allow background color and text color changes to be made without needing to specify the CSS.  For example, when specifying #bgblue in the markdown file, the R program knows that you want the background color (bg) to be blue.&lt;/p&gt;

&lt;p&gt;Try it out and let me know of new features or bugs as you work through the package.&lt;/p&gt;
</description>
				<pubDate>Wed, 30 Jul 2014 00:00:00 -0500</pubDate>
				<link>http://educate-r.org//2014/07/30/highlightHTML/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/07/30/highlightHTML/</guid>
			</item>
		
			<item>
				<title>R gui Revisited</title>
				<description>&lt;p&gt;A couple months ago I wrote about switching my class from using SPSS to one that uses R with a gui frontend (&lt;a href=&quot;http://educate-r.org/2014/02/03/Rgui/&quot;&gt;original post&lt;/a&gt;).  Since the semester has wrapped up, below are my thoughts on how the course went with respect to the students using R.&lt;/p&gt;

&lt;h4&gt;Things that went well&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Many students by the end were starting to understand the power of R (even through a gui structure).  Most were able to create new variables, run statistical analyses, produce basic graphs or figures, and even understand a few basic commands. They also enjoyed that the language and program were free and they could bring their laptops to class when we were going to talk about doing something new in R.&lt;/p&gt;

&lt;p&gt;I also did not hear any stories of a gui system crashing (which was one complaint of &lt;em&gt;Deducer&lt;/em&gt; in the comments of my last post).  I had students using either &lt;em&gt;Deducer&lt;/em&gt; or &lt;em&gt;Rcmdr&lt;/em&gt;, but whenever possible steered them toward &lt;em&gt;Deducer&lt;/em&gt; as it is a bit more user friendly (in my opinion) and uses &lt;em&gt;ggplot2&lt;/em&gt; by default for graphics.  Although &lt;em&gt;Deducer&lt;/em&gt; did crash on me once while demonstrating something during class, I did not hear any students complain about it.&lt;/p&gt;

&lt;p&gt;During the last two weeks of the course when more assignments surrounding basic inferential methods were due, students were becoming much more confident and better able to navigate the R gui menus.  I do also think that the students did appreciate the simpleness of the R output, only giving you what you ask for (as compared to SPSS that gives you extremely more than you ask for). One part of any gui system is to figure out the menu structure and understand the basic language of the menu.  Once I was able to point students to the correct menus, give them correct names for statistical procedures, and also point out specific R terminology they were much more comfortable doing things on their own (and even on occasion trying new things on their own).&lt;/p&gt;

&lt;h4&gt;Things that went poorly&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Using both &lt;em&gt;Deducer&lt;/em&gt; and &lt;em&gt;Rcmdr&lt;/em&gt; in the class.  I did not want to do this initially, but was forced to do it as I was unsure initially why some students were getting an error (it is based on the Java version installed).  I should have spent more time trying to transition students to &lt;em&gt;Deducer&lt;/em&gt; after figuring out the error, however did not want to have them learn a new system after starting to learn &lt;em&gt;Rcmdr&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another sticky spot was that I did not have students learn &lt;em&gt;Markdown&lt;/em&gt;, therefore students were copying and pasting output into Word. If anyone has tried this in the past, it usually does not format the best.  In the future (definitely for a PhD level course) I would have students learn &lt;em&gt;Markdown&lt;/em&gt; as it would likely not take more than an hour.&lt;/p&gt;

&lt;p&gt;Students using &lt;em&gt;Rcmdr&lt;/em&gt; had difficulty created dichotomous variables from a continuous variable.  With &lt;em&gt;Rcmdr&lt;/em&gt;, one needs to know some basic R commands (like &lt;em&gt;ifelse&lt;/em&gt;) in order to create dichotomous variables.  This is not something that I spent much time going over in class and was a definite stumbling block for many students.&lt;/p&gt;

&lt;p&gt;An unfortunate aspect of any course where students need to learn software (or just any type of material in general) is that some students do not feel the software is something they are going to use down the road.  As a result, a handful of students seemed to be a bit more obstinate regarding the use of R (and my guess would have been a similar reaction to using SPSS).&lt;/p&gt;

&lt;p&gt;Lastly, I did not have assignments that focused specifically on learning R.  If I ever teach a course of this level again (which may not occur at my new job at the University of Iowa) I would definitely have more regular small assignments to accomplish more data manipulation tasks, such as creating a new variable, turn a variable into a factor, etc.&lt;/p&gt;

&lt;h4&gt;Summary&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;In general I was pleased with using R and more specifically using a R gui for the the course.  The scope of the class was not to teach students a statistical language and for many of these students this was likely their last research/statistics course. This gave me one shot to try to get them familiar enough with the program to be an option for them in the future.  I do feel that the students became familiar enough with R during the course to be able to use it for basic data manipulation and analysis in the future, but are still tied to the gui system.&lt;/p&gt;

&lt;p&gt;With that being said, if I ever teach a similar course in the future, I would likely create a shiny app that allows students to interact in the browser instead of using the R gui. The scope of the course is focused more on interpretation of the output rather than learning the statistical package to get the output, so the shiny app would work well (I&#39;m imagining a Tinkerplots-esque look and feel). I would also recommend for anyone who has students and a course at a similar level and you choose to use a gui system for R, to use &lt;em&gt;Deducer&lt;/em&gt;.  Once the initial setup bottlenecks are worked out it is much easier for the students to learn and use (and is more similar to SPSS if they use that program in the future).&lt;/p&gt;
</description>
				<pubDate>Tue, 27 May 2014 00:00:00 -0500</pubDate>
				<link>http://educate-r.org//2014/05/27/rguirevisit/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/05/27/rguirevisit/</guid>
			</item>
		
			<item>
				<title>AERA Preview</title>
				<description>&lt;p&gt;The American Educational Research Association (AERA) annual conference is this weekend in Philadelphia.  I was lucky to have a paper accepted into the conference.  I am presenting a meta analysis that I have been working on for the past two years or so titled: Model misspecification and assumption violations with the linear mixed model: A meta analysis.&lt;/p&gt;

&lt;p&gt;In this paper, I have compiled numerous monte carlo studies perform a quantitative synthesis of the literature.  I have focused primarily on longitudinal linear mixed models as that was what my dissertation topic, and practically speaking, I already had many monte carlo studies in hand making the task a bit simpler.&lt;/p&gt;

&lt;p&gt;Here is a sneak peak of some of the results from my paper in the form of an interactive chart using the &lt;em&gt;rChart&lt;/em&gt; package to get started.  Here is my r code to generate the initial chart:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(rCharts)
h1 &amp;lt;- hPlot(x = &quot;fitSerCor2&quot;, y = &quot;avgt1e&quot;, group = &quot;missRE&quot;, data = intmean)
h1$yAxis(title = list(text = &quot;Empirical Type I Error Rate&quot;), min = 0.00, max = 0.2, tickInterval = 0.05)
h1$xAxis(title = list(text = &quot;Fitted Serial Correlation Structure&quot;),
         categories = c(&quot;Ind&quot;, &quot;AR1&quot;, &quot;MA1&quot;, &quot;MA2&quot;, &quot;ARMA&quot;))
h1$legend(verticalAlign = &quot;top&quot;, align = &quot;right&quot;, layout = &quot;vertical&quot;, title = list(text = &quot;Miss RE&quot;))
h1$print(&#39;chart1&#39;, include_assets = TRUE, cdn = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As in one of my prior posts about &lt;em&gt;rCharts&lt;/em&gt; I manually added a few features to the Javascript manually.  I find that easier than bundling lists upon lists to achieve the desired result.  Below is the final image:&lt;/p&gt;

&lt;script type=&#39;text/javascript&#39; src=http://code.jquery.com/jquery-1.9.1.min.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/highcharts.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/highcharts-more.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/modules/exporting.js&gt;&lt;/script&gt;


&lt;p&gt;
 &lt;style&gt;
  .rChart {
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 800px;
    height: 600px;
    font-size: 200%;
  }&lt;br/&gt;
  &lt;/style&gt;&lt;/p&gt;

&lt;div id = &#39;chart1&#39; class = &#39;rChart highcharts&#39;&gt;&lt;/div&gt;


&lt;script type=&#39;text/javascript&#39;&gt;
    (function($){
        $(function () {
            var chart = new Highcharts.Chart({
 &quot;dom&quot;: &quot;chart1&quot;,
&quot;width&quot;:            800,
&quot;height&quot;:            400,
&quot;credits&quot;: {
 &quot;href&quot;: null,
&quot;text&quot;: null 
},
&quot;exporting&quot;: {
 &quot;enabled&quot;: false 
},
&quot;title&quot;: {
 &quot;text&quot;: null 
},
&quot;yAxis&quot;: [
 {
 &quot;title&quot;: {
 &quot;text&quot;: &quot;Empirical Type I Error Rate&quot;,
   style: {
   fontWeight: &#39;bold&#39;,
   fontSize: &#39;20px&#39;
   }
},
labels: {
  style: {
   fontSize: &#39;18px&#39;
  }
 },
&quot;min&quot;:              0,
&quot;max&quot;:            0.2,
&quot;tickInterval&quot;:           0.05 
} 
],
&quot;series&quot;: [
 {
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
0.0519
],
 [
 &quot;AR1&quot;,
0.0635
],
[
 &quot;MA1&quot;,
0.0639
],
[
 &quot;MA2&quot;,
0.0665
], 
[
 &quot;ARMA&quot;,
0.0656
],
],
events: {
            mouseOver: function () {
                this.update({
                    color: &#39;black&#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &#39;#e41a1c&#39;
                }); 
            }
        },
&quot;color&quot;: &quot;#e41a1c&quot;,
&quot;name&quot;: &quot;0&quot;,
&quot;type&quot;: null,
&quot;marker&quot;: {
 &quot;radius&quot;:              6
} 
},
{
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
0.1837
],
 [
 &quot;AR1&quot;,
0.0864
],
[
 &quot;MA1&quot;,
0.1155
],
[
 &quot;MA2&quot;,
0.0999
], 
[
 &quot;ARMA&quot;,
0.0896
],
],
events: {
            mouseOver: function () {
                this.update({
                    color: &#39;black&#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &#39;#377eb8&#39;
                }); 
            }
        },
&quot;color&quot;: &quot;#377eb8&quot;,
&quot;name&quot;: &quot;1&quot;,
&quot;type&quot;: null,
&quot;marker&quot;: {
 &quot;radius&quot;:              6
} 
} 
],
&quot;xAxis&quot;: [
 {
 &quot;title&quot;: {
 &quot;text&quot;: &quot;Fitted Serial Correlation Structure&quot;,
 style:{
   fontWeight: &#39;bold&#39;,
   fontSize: &#39;20px&#39;
 }
},
labels: {
 style: {
  fontSize: &#39;18px&#39;,
  fontWeight: &#39;bold&#39;
 }
},
&quot;categories&quot;: [ &quot;Ind&quot;, &quot;AR1&quot;, &quot;MA1&quot;, &quot;MA2&quot;, &quot;ARMA&quot; ] 
} 
],
&quot;subtitle&quot;: {
 &quot;text&quot;: null 
},
&quot;legend&quot;: {
 &quot;verticalAlign&quot;: &quot;top&quot;,
&quot;align&quot;: &quot;right&quot;,
&quot;layout&quot;: &quot;vertical&quot;,
symbolWidth: 40,
&quot;title&quot;: {
 &quot;text&quot;: &quot;Miss RE&quot; 
} 
},
&quot;plotOptions&quot;: {
 &quot;series&quot;: {
 &quot;lineWidth&quot;:              4 
} 
},
&quot;id&quot;: &quot;chart1&quot;,
&quot;chart&quot;: {
 &quot;renderTo&quot;: &quot;chart1&quot;,
  zoomType: &quot;y&quot;,
   &quot;style&quot;: {
 fontSize: &quot;24px&quot;
 },
 resetZoomButton: {
  position: {
   align: &#39;left&#39;
  }
 }
} 
});
        });
    })(jQuery);
&lt;/script&gt;


&lt;p&gt;If anyone is attending AERA this year and wants to listen to my presentation as well as others dealing with Methodological Considerations in Modeling Latent Growth (the title of the session) stop by the Convention Center on Sunday, April 6th from 4:05 to 5:35 pm in room 117.  Even if you do not want to hear about modeling latent growth, but would rather talk about r, perhaps we can meetup somewhere else.&lt;/p&gt;
</description>
				<pubDate>Wed, 02 Apr 2014 00:00:00 -0500</pubDate>
				<link>http://educate-r.org//2014/04/02/aerapreview/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/04/02/aerapreview/</guid>
			</item>
		
			<item>
				<title>Evolution of Code</title>
				<description>&lt;p&gt;Recently while scraping some data from the college football data warehouse site, I started to realize the evolution of my code.  To preface this, I am definitely not a trained programmer, just a self taught junky who enjoys doing it when I have time.  I&#39;ve slowly evolved my programming skills from simply statistics languages like r or SPSS, to some other languages like LaTeX, HTML, CSS, Javascript, and I&#39;ve started to work through some python.&lt;/p&gt;

&lt;p&gt;Now back to my realization.  As I mentioned, I was scraping some data from &lt;a href=&quot;http://www.cfbdatawarehouse.com/&quot;&gt;CFB Data Warehouse&lt;/a&gt; for a project that I&#39;m working on with a colleague and was adapting some code that was written about 3 years ago.  The problem was that my old code was broken.  The original code was about 100 lines of code just to select the correct table and format it.  Here is a chunk of the original code to select the correct table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;  ##Identifying correct tables
    tb &amp;lt;- vector(&quot;list&quot;, length(tableNodes))
      for(i in 1:length(tableNodes)){
        tb[[i]] &amp;lt;- readHTMLTable(tableNodes[[i]])
      }

  ##Tables that are the correct length
    tabNum &amp;lt;- matrix(nrow=length(tableNodes), ncol=2)
    tabNum[,1] &amp;lt;- sapply(tb, length)
    tabNum[,2] &amp;lt;- 1:length(tableNodes)

   Num &amp;lt;- subset(tabNum, tabNum[,1] == 7)[,2]

  ##Selecting and combining tables
if(length(Num) == 5){
   tb1 &amp;lt;- tb[[Num[3]]]
   tb1$Other &amp;lt;- 0
   tb2 &amp;lt;- tb[[Num[5]]]
   tb2$Other &amp;lt;- 1
   tab &amp;lt;- rbind(tb1, tb2)
 } else { 
  if(length(Num) ==3){
   tab &amp;lt;- tb[[Num[3]]]
   tab$Other &amp;lt;- 1
 } else {
  tab &amp;lt;- matrix(NA, ncol= 8, nrow=1)  
 }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code was looped over many different pages and was run once for every page.  Essentially the code is complicated and inconsistent, but at the time 3 years ago the code ran and that was enough for me.  Extract the data from the website no matter how much code was needed to do the work.  This was back in an era when I was just becoming familiar with much or &lt;em&gt;R&lt;/em&gt;, the &lt;em&gt;XML&lt;/em&gt; package, and attempting to scrape data from a messy/complicated site.&lt;/p&gt;

&lt;p&gt;My new code to extract the tables looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;# extracting tables
  tabs &amp;lt;- lapply(seq(3, length(Nodes), 1), function(x) 
    readHTMLTable(Nodes[[x]], stringsAsFactors = FALSE))

  # Combine tables
  bowl &amp;lt;- do.call(&quot;rbind&quot;, tabs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much cleaner, simpler, more consistent, and quite possibly quicker.  The ability to focus on speed, readability, and consistency is something that comes later after one becomes more comfortable with the language.  I have been focusing on this for awhile, but these stark differences and ease I was able to adapt my old code especially struck me this time.  I haven&#39;t decided if this evolution for me is &lt;em&gt;mastery&lt;/em&gt; or &lt;em&gt;expert&lt;/em&gt; status of the r language, but I now feel I have progressed to a point where I feel confident and am able to shift my focus from having code that works, to code that is now clean, consistent, and readable.&lt;/p&gt;

&lt;p&gt;Has anyone else had similar epiphanies with their code?&lt;/p&gt;

&lt;p&gt;Lastly, if you want to see the raw code, go to the github page: &lt;a href=&quot;https://github.com/lebebr01/cfbFootball&quot;&gt;https://github.com/lebebr01/cfbFootball&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 27 Mar 2014 00:00:00 -0500</pubDate>
				<link>http://educate-r.org//2014/03/27/evolvecode/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/03/27/evolvecode/</guid>
			</item>
		
			<item>
				<title>Update to highlightHTML package</title>
				<description>&lt;p&gt;I&#39;ve added a new functionality to my &lt;em&gt;highlightHTML&lt;/em&gt; package.  This package post-processes HTML files and injects CSS and adds tags to create some further customization (for example highlight cells of a HTML table).  This is most useful when writing a document using markdown and converting it into a HTML document using a tool like knitr, slidify, or even pandoc.&lt;/p&gt;

&lt;p&gt;Up to now, my package only worked with tables, see my old post that talks about this if you are interested: &lt;a href=&quot;http://educate-r.org/2013/11/01/CondFormatMarkdown/&quot;&gt;highlight tables&lt;/a&gt;.  My update adds a similar functionality to text itself by including span tags in the document.&lt;/p&gt;

&lt;p&gt;The following code will install the package with the new feature from github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(devtools)
install_github(repo = &quot;highlightHTML&quot;, username = &quot;lebebr01&quot;, ref = &quot;testing&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the package is installed, the new function is called &lt;strong&gt;highlightHTMLtext&lt;/strong&gt;. This function takes a HTML file as the input and post processes the file to add span tags to format text according to the CSS calls specified by the user.  The function looks for {#id text} to add the span tags.  The braces are used to define the text range that will use the id and the #id is the CSS id itself.&lt;/p&gt;

&lt;p&gt;Here is an example using the HTML file that comes with the package and which can also be found in the help file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(highlightHTML)
file &amp;lt;- system.file(&#39;examples&#39;, package = &#39;highlightHTML&#39;)
file1 &amp;lt;- paste(file, &quot;bgtext.html&quot;, sep = &quot;/&quot;)

# Change background color and text color with CSS
tags &amp;lt;- c(&quot;#bgblack {background-color: black; color: white;}&quot;,
  &quot;#bgblue {background-color: #0000FF; color: white;}&quot;)

# Post-process HTML file
highlightHTMLtext(input = file1, output = NULL, updateCSS = TRUE,
  tags = tags, browse = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the above command, the file should open in your browser to see the result of the new HTML file.  The result should have boxes of color in specific areas that we indicated by the {#id text} syntax in the raw markdown and HTML file.&lt;/p&gt;

&lt;p&gt;My next step is to develop a master function to wrap these other functions so only one call would be needed to format text and tables.  Let me know of any issues by going to the github page: &lt;a href=&quot;https://github.com/lebebr01/highlightHTML&quot;&gt;report bugs&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Before and After HTML&lt;/h3&gt;

&lt;p&gt;Here is what the body of the HTML file looks like before running the function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Test of Text&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Testing the ability to change the {#bgblue color} of the text.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Can also do {#bgblack multiple words of text}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{#bgblack Even entire paragraphs that you want to really stand out from the rest of the document.  More than color could also be changed, anything alterable by CSS.  Test out the function and get creative with the CSS}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is what the HTML document looks like after running the function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Test of Text&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Testing the ability to change the &amp;lt;span id=&amp;#39;bgblue&amp;#39;&amp;gt; color&amp;lt;/span&amp;gt; of the text.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Can also do &amp;lt;span id=&amp;#39;bgblack&amp;#39;&amp;gt; multiple words of text&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span id=&amp;#39;bgblack&amp;#39;&amp;gt; Even entire paragraphs that you want to really stand out from the rest of the document.  More than color could also be changed, anything alterable by CSS.  Test out the function and get creative with the CSS&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The braces identify the location of the span tags and the custom CSS id tag to format the text.&lt;/p&gt;
</description>
				<pubDate>Fri, 14 Mar 2014 00:00:00 -0500</pubDate>
				<link>http://educate-r.org//2014/03/14/htmltext/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/03/14/htmltext/</guid>
			</item>
		
			<item>
				<title>rCharts with slidy</title>
				<description>&lt;p&gt;My last post I talked about using &lt;em&gt;rCharts&lt;/em&gt; to create interactive graphics for my interview presentations.  They seemed to go over pretty well in my interviews and helped me greatly as I did not need to remember or write down specific numbers to talk about.  I use &lt;em&gt;slidy&lt;/em&gt; to create my HTML slideshows and there was some interest from my last post to see exactly how I had these charts into a &lt;em&gt;slidy&lt;/em&gt; html presentation.&lt;/p&gt;

&lt;p&gt;First off, I did not use &lt;em&gt;rCharts&lt;/em&gt; and &lt;em&gt;knitr&lt;/em&gt; in tandem, but that would make the workflow a bit easier.  The major thing you&#39;d want to remember is to make sure to add the following chunk option: &lt;strong&gt;results = &#39;asis&#39;&lt;/strong&gt;.  This will ensure that the raw html printed from &lt;em&gt;rCharts&lt;/em&gt; will be included in the markdown file as is.&lt;/p&gt;

&lt;p&gt;I personally just copy and pasted the javascript into my markdown presentation (instead of using &lt;em&gt;knitr&lt;/em&gt; as talked about above).  This was easier for me as I edited many specific options in the raw Javascript to come to my final version (and created a boxplot from scratch).  It would be possible to make all the edits directly through the &lt;em&gt;rCharts&lt;/em&gt; framework, but I found it easier to edit the raw Javascript by looking at the highcharts.js documentation to get the figure I was looking for.&lt;/p&gt;

&lt;p&gt;For those who did not see my last post, here is the R code I used to create my graphic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(rCharts)

h1 &amp;lt;- hPlot(x = &quot;GenSerCor&quot;, y = &quot;percent&quot;, group = &quot;FitSerCor&quot;, data = converge)
h1$yAxis(title = list(text = &quot;Convergence Rate&quot;), min = 0, max = 100, tickInterval = 10)
h1$xAxis(title = list(text = &quot;Generated Serial Correlation Structure&quot;),
         categories = c(&quot;Ind&quot;, &quot;AR1&quot;, &quot;MA1&quot;, &quot;MA2&quot;, &quot;ARMA&quot;))
h1$legend(verticalAlign = &quot;top&quot;, align = &quot;right&quot;, layout = &quot;vertical&quot;, title = list(text = &quot;Fitted SC&quot;))
h1$plotOptions(series = list(lineWidth = 4))
h1$print(&#39;chart1&#39;, include_assets = TRUE, cdn = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I ran this command in R, I edited the resulting Javascript code that was printed from the last line of the R code above.  My final Javascript code can be seen below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.jquery.com/jquery-1.9.1.min.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/highcharts.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/highcharts-more.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/modules/exporting.js&amp;gt;&amp;lt;/script&amp;gt; 
 &amp;lt;style&amp;gt;
  .rChart {
    display: block;
    margin-left: auto; 
    margin-right: auto;
    width: 800px;
    height: 400px;
    font-size: 200%;
  }  
  &amp;lt;/style&amp;gt;
&amp;lt;div id = &amp;#39;chart1&amp;#39; class = &amp;#39;rChart highcharts&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;
    (function($){
        $(function () {
            var chart = new Highcharts.Chart({
 &amp;quot;dom&amp;quot;: &amp;quot;chart1&amp;quot;,
&amp;quot;width&amp;quot;:            800,
&amp;quot;height&amp;quot;:            400,
&amp;quot;credits&amp;quot;: {
 &amp;quot;href&amp;quot;: null,
&amp;quot;text&amp;quot;: null 
},
&amp;quot;exporting&amp;quot;: {
 &amp;quot;enabled&amp;quot;: false 
},
&amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: null 
},
&amp;quot;yAxis&amp;quot;: [
 {
 title: {
 text: &amp;quot;Convergence Rate&amp;quot;,
  style: {
   fontWeight: &amp;#39;bold&amp;#39;,
   fontSize: &amp;#39;20px&amp;#39;
   }
 },
 labels: {
  formatter: function() {
   return this.value + &amp;#39;%&amp;#39;;
  },
  style: {
   fontSize: &amp;#39;18px&amp;#39;
  }
 },
&amp;quot;min&amp;quot;:              0,
&amp;quot;max&amp;quot;:            100,
&amp;quot;tickInterval&amp;quot;:             10 ,
minRange: 10
} 
],
&amp;quot;series&amp;quot;: [
 {
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
   68.38 
],
[ &amp;quot;AR1&amp;quot;,
   64.88 
],
[ &amp;quot;MA1&amp;quot;,
   55.12 
],
[ &amp;quot;MA2&amp;quot;,
   61.98 
],
[ &amp;quot;ARMA&amp;quot;,
   42.17 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#e41a1c&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#e41a1c&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;AR1&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;Solid&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
  65.1 
],
[ &amp;quot;AR1&amp;quot;,
   60.45 
],
[ &amp;quot;MA1&amp;quot;,
  63.68 
],
[ &amp;quot;MA2&amp;quot;,
  54.88 
],
[ &amp;quot;ARMA&amp;quot;,
   63.6 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#377eb8&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#377eb8&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;ARMA&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;ShortDash&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
},
{
 &amp;quot;data&amp;quot;: [
 [&amp;quot;Ind&amp;quot;,
  72.48 
],
[ &amp;quot;AR1&amp;quot;,
  93.88 
],
[ &amp;quot;MA1&amp;quot;,
  92.23 
],
[ &amp;quot;MA2&amp;quot;,
  95.62 
],
[ &amp;quot;ARMA&amp;quot;,
  98.37 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#4daf4a&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#4daf4a&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Ind&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;Dash&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
  71.02 
],
[ &amp;quot;AR1&amp;quot;,
   81.37 
],
[ &amp;quot;MA1&amp;quot;,
   69.15 
],
[ &amp;quot;MA2&amp;quot;,
   84.5 
],
[ &amp;quot;ARMA&amp;quot;,
   88.02 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#984ea3&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#984ea3&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MA1&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;ShortDot&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
   67.23 
],
[ &amp;quot;AR1&amp;quot;,
   70.78 
],
[ &amp;quot;MA1&amp;quot;,
   65.93 
],
[ &amp;quot;MA2&amp;quot;,
   68.83 
],
[ &amp;quot;ARMA&amp;quot;,
   72.9 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#ff7f00&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#ff7f00&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MA2&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;DashDot&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
} 
],
&amp;quot;xAxis&amp;quot;: [
 {
 title: {
 text: &amp;quot;Generated Serial Correlation Structure&amp;quot;,
  style:{
   fontWeight: &amp;#39;bold&amp;#39;,
   fontSize: &amp;#39;20px&amp;#39;
 }
},
labels: {
 style: {
  fontSize: &amp;#39;18px&amp;#39;,
  fontWeight: &amp;#39;bold&amp;#39;
 }
},
&amp;quot;categories&amp;quot;: [ &amp;quot;Ind&amp;quot;, &amp;quot;AR1&amp;quot;, &amp;quot;MA1&amp;quot;, &amp;quot;MA2&amp;quot;, &amp;quot;ARMA&amp;quot; ] 
} 
],
&amp;quot;subtitle&amp;quot;: {
 &amp;quot;text&amp;quot;: null 
},
&amp;quot;legend&amp;quot;: {
 &amp;quot;verticalAlign&amp;quot;: &amp;quot;top&amp;quot;,
&amp;quot;align&amp;quot;: &amp;quot;right&amp;quot;,
&amp;quot;layout&amp;quot;: &amp;quot;vertical&amp;quot;,
symbolWidth: 40,
&amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: &amp;quot;Fitted SC&amp;quot; 
} 
},
&amp;quot;plotOptions&amp;quot;: {
 &amp;quot;series&amp;quot;: {
 &amp;quot;lineWidth&amp;quot;:   4 
} 
},
&amp;quot;id&amp;quot;: &amp;quot;chart1&amp;quot;,
&amp;quot;chart&amp;quot;: {
 &amp;quot;renderTo&amp;quot;: &amp;quot;chart1&amp;quot;, 
 zoomType: &amp;quot;y&amp;quot;,
 &amp;quot;style&amp;quot;: {
 fontSize: &amp;quot;24px&amp;quot;
 },
 resetZoomButton: {
  position: {
   align: &amp;#39;left&amp;#39;
  }
 }
} 
});
        });
    })(jQuery);
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have that in markdown format, you can turn it into a &lt;em&gt;slidy&lt;/em&gt; html presentation with the following command in &lt;em&gt;pandoc&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pandoc -s --mathjax -i -t slidy inputfile.md -o outfile.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives you a file that looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;
 &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;Content-Style-Type&amp;quot; content=&amp;quot;text/css&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;pandoc&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;Your Name&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;Witty Title&amp;lt;/title&amp;gt;
  &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;code{white-space: pre;}&amp;lt;/style&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen, projection, print&amp;quot;
    href=&amp;quot;http://www.w3.org/Talks/Tools/Slidy2/styles/slidy.css&amp;quot; /&amp;gt;
&amp;lt;script src=&amp;quot;http://www.w3.org/Talks/Tools/Slidy2/scripts/slidy.js&amp;quot;
    charset=&amp;quot;utf-8&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.jquery.com/jquery-1.9.1.min.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/highcharts.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/highcharts-more.js&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39; src=http://code.highcharts.com/modules/exporting.js&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;style&amp;gt;
  .rChart {
    display: block;
    margin-left: auto; 
    margin-right: auto;
    width: 1000px;
    height: 800px;
    font-size: 200%;
  }  
  &amp;lt;/style&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;MathJax.Hub.Queue([&amp;quot;Typeset&amp;quot;,MathJax.Hub]);&amp;lt;/script&amp;gt;
 &amp;lt;!--   &amp;lt;script src=&amp;quot;http://www.w3.org/Talks/Tools/Slidy2/scripts/slidy.js&amp;quot;
    charset=&amp;quot;utf-8&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id = &amp;#39;chart1&amp;#39; class = &amp;#39;rChart&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;
    (function($){
        $(function () {
            var chart = new Highcharts.Chart({
 &amp;quot;dom&amp;quot;: &amp;quot;chart1&amp;quot;,
&amp;quot;width&amp;quot;:            1000,
&amp;quot;height&amp;quot;:            600,
&amp;quot;credits&amp;quot;: {
 &amp;quot;href&amp;quot;: null,
&amp;quot;text&amp;quot;: null 
},
&amp;quot;exporting&amp;quot;: {
 &amp;quot;enabled&amp;quot;: false 
},
&amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: null 
},
&amp;quot;yAxis&amp;quot;: [
 {
 title: {
 text: &amp;quot;Convergence Rate&amp;quot;,
  style: {
   fontWeight: &amp;#39;bold&amp;#39;,
   fontSize: &amp;#39;20px&amp;#39;
   }
 },
 labels: {
  formatter: function() {
   return this.value + &amp;#39;%&amp;#39;;
  },
  style: {
   fontSize: &amp;#39;18px&amp;#39;
  }
 },
&amp;quot;min&amp;quot;:              0,
&amp;quot;max&amp;quot;:            100,
&amp;quot;tickInterval&amp;quot;:             10 ,
minRange: 10
} 
],
&amp;quot;series&amp;quot;: [
 {
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
  68.38 
],
[ &amp;quot;AR1&amp;quot;,
  64.88 
],
[ &amp;quot;MA1&amp;quot;,
  55.12 
],
[ &amp;quot;MA2&amp;quot;,
  61.98 
],
[ &amp;quot;ARMA&amp;quot;,
  42.17 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#e41a1c&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#e41a1c&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;AR1&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;Solid&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
  65.1 
],
[ &amp;quot;AR1&amp;quot;,
  60.45 
],
[ &amp;quot;MA1&amp;quot;,
  63.68 
],
[ &amp;quot;MA2&amp;quot;,
  54.88 
],
[ &amp;quot;ARMA&amp;quot;,
   63.6 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#377eb8&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#377eb8&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;ARMA&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;ShortDash&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
  72.48 
],
[ &amp;quot;AR1&amp;quot;,
  93.88 
],
[ &amp;quot;MA1&amp;quot;,
   92.23 
],
[ &amp;quot;MA2&amp;quot;,
   95.62 
],
[ &amp;quot;ARMA&amp;quot;,
   98.37 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#4daf4a&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#4daf4a&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Ind&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;Dash&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
   71.02 
],
[ &amp;quot;AR1&amp;quot;,
   81.37 
],
[ &amp;quot;MA1&amp;quot;,
   69.15 
],
[ &amp;quot;MA2&amp;quot;,
   84.5 
],
[ &amp;quot;ARMA&amp;quot;,
   88.02 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#984ea3&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#984ea3&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MA1&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;ShortDot&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6
} 
},
{
 &amp;quot;data&amp;quot;: [
 [ &amp;quot;Ind&amp;quot;,
   67.23 
],
[ &amp;quot;AR1&amp;quot;,
   70.78 
],
[ &amp;quot;MA1&amp;quot;,
   65.93 
],
[ &amp;quot;MA2&amp;quot;,
   68.83 
],
[ &amp;quot;ARMA&amp;quot;,
    72.9 
] 
],
events: {
            mouseOver: function () {
                this.update({
                    color: &amp;#39;black&amp;#39;
                });                
            },
            mouseOut: function () {
                this.update({
                    color: &amp;#39;#ff7f00&amp;#39;
                }); 
            }
        },
&amp;quot;color&amp;quot;: &amp;quot;#ff7f00&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MA2&amp;quot;,
&amp;quot;type&amp;quot;: null,
dashStyle: &amp;#39;DashDot&amp;#39;,
&amp;quot;marker&amp;quot;: {
 &amp;quot;radius&amp;quot;:              6 
} 
} 
],
&amp;quot;xAxis&amp;quot;: [
 {
 title: {
 text: &amp;quot;Generated Serial Correlation Structure&amp;quot;,
  style:{
   fontWeight: &amp;#39;bold&amp;#39;,
   fontSize: &amp;#39;20px&amp;#39;
 }
},
labels: {
 style: {
  fontSize: &amp;#39;18px&amp;#39;,
  fontWeight: &amp;#39;bold&amp;#39;
 }
},
&amp;quot;categories&amp;quot;: [ &amp;quot;Ind&amp;quot;, &amp;quot;AR1&amp;quot;, &amp;quot;MA1&amp;quot;, &amp;quot;MA2&amp;quot;, &amp;quot;ARMA&amp;quot; ] 
} 
],
&amp;quot;subtitle&amp;quot;: {
 &amp;quot;text&amp;quot;: null 
},
&amp;quot;legend&amp;quot;: {
 &amp;quot;verticalAlign&amp;quot;: &amp;quot;top&amp;quot;,
&amp;quot;align&amp;quot;: &amp;quot;right&amp;quot;,
&amp;quot;layout&amp;quot;: &amp;quot;vertical&amp;quot;,
symbolWidth: 40,
&amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: &amp;quot;Fitted SC&amp;quot; 
} 
},
&amp;quot;plotOptions&amp;quot;: {
 &amp;quot;series&amp;quot;: {
 &amp;quot;lineWidth&amp;quot;:              4 
} 
},
&amp;quot;id&amp;quot;: &amp;quot;chart1&amp;quot;,
&amp;quot;chart&amp;quot;: {
 &amp;quot;renderTo&amp;quot;: &amp;quot;chart1&amp;quot;, 
 zoomType: &amp;quot;y&amp;quot;,
 &amp;quot;style&amp;quot;: {
 fontSize: &amp;quot;24px&amp;quot;
 },
 resetZoomButton: {
  position: {
   align: &amp;#39;left&amp;#39;
  }
 }
} 
});
        });
    })(jQuery);
&amp;lt;/script&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That should give you a html presentation with an interactive Javascript based figure.&lt;/p&gt;
</description>
				<pubDate>Mon, 03 Mar 2014 00:00:00 -0600</pubDate>
				<link>http://educate-r.org//2014/03/03/rChartsslidy/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/03/03/rChartsslidy/</guid>
			</item>
		
			<item>
				<title>Interactive charts with rCharts</title>
				<description>&lt;p&gt;I have a few upcoming presentations as a part of job interviews. To prepare for these interviews, I&#39;m attempting to make my figures a bit more interactive within my presentations.  The aim is to be able to limit any large cumbersome tables I would need to include in my presentations and replace them with interactive plots that can look up values, zoom in, etc.&lt;/p&gt;

&lt;p&gt;I initially explored both &lt;a href=&quot;http://plot.ly&quot;&gt;plot.ly&lt;/a&gt; and &lt;a href=&quot;http://ramnathv.github.io/rCharts/&quot;&gt;rCharts&lt;/a&gt;, but ended up using &lt;em&gt;rCharts&lt;/em&gt; as I found I was more easily able to put it directly into my presentation.  It may be possible with &lt;em&gt;plot.ly&lt;/em&gt; but I did not want to put in the time to figure it out.  I could only find a way to link to the website for the interactive version.&lt;/p&gt;

&lt;p&gt;Using &lt;em&gt;highcharts.js&lt;/em&gt; that is integrated into &lt;em&gt;rCharts&lt;/em&gt; I was able to create the following interactive figure that explores the convergence rate of a portion of my dissertation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(rCharts)

h1 &amp;lt;- hPlot(x = &quot;GenSerCor&quot;, y = &quot;percent&quot;, group = &quot;FitSerCor&quot;, data = converge)
h1$yAxis(title = list(text = &quot;Convergence Rate&quot;), min = 0, max = 100, tickInterval = 10)
h1$xAxis(title = list(text = &quot;Generated Serial Correlation Structure&quot;),
         categories = c(&quot;Ind&quot;, &quot;AR1&quot;, &quot;MA1&quot;, &quot;MA2&quot;, &quot;ARMA&quot;))
h1$legend(verticalAlign = &quot;top&quot;, align = &quot;right&quot;, layout = &quot;vertical&quot;, title = list(text = &quot;Fitted SC&quot;))
h1$plotOptions(series = list(lineWidth = 4))
h1$print(&#39;chart1&#39;, include_assets = TRUE, cdn = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;script type=&#39;text/javascript&#39; src=http://code.jquery.com/jquery-1.9.1.min.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/highcharts.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/highcharts-more.js&gt;&lt;/script&gt;


&lt;script type=&#39;text/javascript&#39; src=http://code.highcharts.com/modules/exporting.js&gt;&lt;/script&gt;


&lt;p&gt;
 &lt;style&gt;
  .rChart {
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 800px;
    height: 400px;
    font-size: 200%;
  }&lt;br/&gt;
  &lt;/style&gt;&lt;/p&gt;

&lt;div id = &#39;chart1&#39; class = &#39;rChart highcharts&#39;&gt;&lt;/div&gt;


&lt;script type=&#39;text/javascript&#39;&gt;
    (function($){
        $(function () {
            var chart = new Highcharts.Chart({
 &quot;dom&quot;: &quot;chart1&quot;,
&quot;width&quot;:            800,
&quot;height&quot;:            400,
&quot;credits&quot;: {
 &quot;href&quot;: null,
&quot;text&quot;: null 
},
&quot;exporting&quot;: {
 &quot;enabled&quot;: false 
},
&quot;title&quot;: {
 &quot;text&quot;: null 
},
&quot;yAxis&quot;: [
 {
 title: {
 text: &quot;Convergence Rate&quot;,
  style: {
   fontWeight: &#39;bold&#39;,
   fontSize: &#39;30px&#39;
   }
 },
 labels: {
  formatter: function() {
   return this.value + &#39;%&#39;;
  },
  style: {
   fontSize: &#39;18px&#39;
  }
 },
&quot;min&quot;:              0,
&quot;max&quot;:            100,
&quot;tickInterval&quot;:             10 ,
minRange: 10
} 
],
&quot;series&quot;: [
 {
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
         68.38 
],
[
 &quot;AR1&quot;,
         64.88 
],
[
 &quot;MA1&quot;,
         55.12 
],
[
 &quot;MA2&quot;,
         61.98 
],
[
 &quot;ARMA&quot;,
         42.17 
] 
],
&quot;color&quot;: &quot;#e41a1c&quot;,
&quot;name&quot;: &quot;AR1&quot;,
&quot;type&quot;: null,
dashStyle: &#39;Solid&#39;,
&quot;marker&quot;: {
 &quot;radius&quot;:              6
} 
},
{
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
          65.1 
],
[
 &quot;AR1&quot;,
         60.45 
],
[
 &quot;MA1&quot;,
         63.68 
],
[
 &quot;MA2&quot;,
         54.88 
],
[
 &quot;ARMA&quot;,
          63.6 
] 
],
&quot;color&quot;: &quot;#377eb8&quot;,
&quot;name&quot;: &quot;ARMA&quot;,
&quot;type&quot;: null,
dashStyle: &#39;ShortDash&#39;,
&quot;marker&quot;: {
 &quot;radius&quot;:              6 
} 
},
{
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
         72.48 
],
[
 &quot;AR1&quot;,
         93.88 
],
[
 &quot;MA1&quot;,
         92.23 
],
[
 &quot;MA2&quot;,
         95.62 
],
[
 &quot;ARMA&quot;,
         98.37 
] 
],
&quot;color&quot;: &quot;#4daf4a&quot;,
&quot;name&quot;: &quot;Ind&quot;,
&quot;type&quot;: null,
dashStyle: &#39;Dash&#39;,
&quot;marker&quot;: {
 &quot;radius&quot;:              6 
} 
},
{
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
         71.02 
],
[
 &quot;AR1&quot;,
         81.37 
],
[
 &quot;MA1&quot;,
         69.15 
],
[
 &quot;MA2&quot;,
          84.5 
],
[
 &quot;ARMA&quot;,
         88.02 
] 
],
&quot;color&quot;: &quot;#984ea3&quot;,
&quot;name&quot;: &quot;MA1&quot;,
&quot;type&quot;: null,
dashStyle: &#39;ShortDot&#39;,
&quot;marker&quot;: {
 &quot;radius&quot;:              6
} 
},
{
 &quot;data&quot;: [
 [
 &quot;Ind&quot;,
         67.23 
],
[
 &quot;AR1&quot;,
         70.78 
],
[
 &quot;MA1&quot;,
         65.93 
],
[
 &quot;MA2&quot;,
         68.83 
],
[
 &quot;ARMA&quot;,
          72.9 
] 
],
&quot;color&quot;: &quot;#ff7f00&quot;,
&quot;name&quot;: &quot;MA2&quot;,
&quot;type&quot;: null,
dashStyle: &#39;DashDot&#39;,
&quot;marker&quot;: {
 &quot;radius&quot;:              6 
} 
} 
],
&quot;xAxis&quot;: [
 {
 title: {
 text: &quot;Generated Serial Correlation Structure&quot;,
  style:{
   fontWeight: &#39;bold&#39;,
   fontSize: &#39;30px&#39;
 }
},
labels: {
 style: {
  fontSize: &#39;18px&#39;,
  fontWeight: &#39;bold&#39;
 }
},
&quot;categories&quot;: [ &quot;Ind&quot;, &quot;AR1&quot;, &quot;MA1&quot;, &quot;MA2&quot;, &quot;ARMA&quot; ] 
} 
],
&quot;subtitle&quot;: {
 &quot;text&quot;: null 
},
&quot;legend&quot;: {
 &quot;verticalAlign&quot;: &quot;top&quot;,
&quot;align&quot;: &quot;right&quot;,
&quot;layout&quot;: &quot;vertical&quot;,
symbolWidth: 40,
&quot;title&quot;: {
 &quot;text&quot;: &quot;Fitted SC&quot; 
} 
},
&quot;plotOptions&quot;: {
 &quot;series&quot;: {
 &quot;lineWidth&quot;:              4 
} 
},
&quot;id&quot;: &quot;chart1&quot;,
&quot;chart&quot;: {
 &quot;renderTo&quot;: &quot;chart1&quot;, 
 zoomType: &quot;y&quot;,
 &quot;style&quot;: {
 fontSize: &quot;24px&quot;
 },
 resetZoomButton: {
  position: {
   align: &#39;left&#39;
  }
 }
} 
});
        });
    })(jQuery);
&lt;/script&gt;


&lt;p&gt;I edited the javascript manually to get some of the effects that I was looking for.  For example, the differing line styles and adding the ability to zoom.  It is possible to add this directly through &lt;em&gt;rCharts&lt;/em&gt;, however I found it much more cumbersome compared to editing the effects I wanted manually.  I find the &lt;em&gt;rCharts&lt;/em&gt; framework is nice to give the user the barebones needed to produce an interactive plot that can be put into an HTML slideshow.  Once getting the general structure, it is easy to look at the documentation for the javascript library and customize the plot yourself.  I personally use &lt;em&gt;slidy&lt;/em&gt; for that aspect and that is where I will use plots like this in the future.  Creating these plots has also helped me to start learning some basics of Javascript which has been on my wish list for the last year or so.&lt;/p&gt;
</description>
				<pubDate>Sat, 15 Feb 2014 00:00:00 -0600</pubDate>
				<link>http://educate-r.org//2014/02/15/rcharts/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/02/15/rcharts/</guid>
			</item>
		
			<item>
				<title>Picking a gui interface for R</title>
				<description>&lt;p&gt;Recently I decided to switch statistical programs used introductory statistics course for masters students that I teach at the University of Arkansas.  Historically this course has been taught with SPSS, but I am attempting the switch to R this semester.  Most students in this class have never used a statistical program before and have no programming background/interest.  As a result, I did not want to have them learn statistics and the R language in the same semester and have them using R with a gui interface.  The two primary gui systems/packages I explored were the &lt;em&gt;Deducer&lt;/em&gt; package and the &lt;em&gt;Rcmdr&lt;/em&gt; package.  Here are my initial thoughts on the switch.&lt;/p&gt;

&lt;h3&gt;Which gui to use?&lt;/h3&gt;

&lt;p&gt;This ultimately comes down to personal preference, however below I&#39;ve highlighted my intial thoughts on pros/cons of each package.&lt;/p&gt;

&lt;h4&gt;Deducer&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: &lt;br/&gt;
- Shows syntax of commands run     &lt;br/&gt;
- Uses ggplot2 for plots           &lt;br/&gt;
- Very interactive menu structures&lt;br/&gt;
- Simple condensed data loading  &lt;br/&gt;
&lt;strong&gt;Cons&lt;/strong&gt;: &lt;br/&gt;
- Uses Java &lt;br/&gt;
- Menus differ from PC to MAC &lt;br/&gt;
- rJava package can be troublesome (not exactly sure why)&lt;/p&gt;

&lt;h4&gt;Rcmdr&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: &lt;br/&gt;
- Shows syntax of commands run      &lt;br/&gt;
- Does not use Java                &lt;br/&gt;
- Very similar data menus across each OS &lt;br/&gt;
- Opens a new window so students know when it has loaded correctly &lt;br/&gt;
&lt;strong&gt;Cons&lt;/strong&gt;: &lt;br/&gt;
- Uses base graphics &lt;br/&gt;
- Data loading structures not integrated&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In general I prefer the &lt;em&gt;Deducer&lt;/em&gt; package as it uses ggplot2 and has a more unified menu structure.  For example, there are not differing menu options for loading data like in &lt;em&gt;Rcmdr&lt;/em&gt;.  Instead, &lt;em&gt;Deducer&lt;/em&gt; has a single load data menu where it is possible to load many types of data including csv, txt, rda, etc.  This is helpful for students who are not very familiar with differing file types and I do not have to spend 5 minutes explaining it.  &lt;em&gt;Deducer&lt;/em&gt; also uses ggplot2 for its graphics which I enjoy much more than base graphics.  In my opinion they look better and the syntax is ultimately easier to create high quality graphics.&lt;/p&gt;

&lt;p&gt;My biggest complaint of the &lt;em&gt;Deducer&lt;/em&gt; package is that it uses Java.  This is one more thing that the user needs to install and with my class we have had trouble on a few computers getting the &lt;em&gt;rJava&lt;/em&gt; package to work properly.  There was also the widely talked about Java exploit that may or may not have been fixed.  Lastly, the differing look of &lt;em&gt;Deducer&lt;/em&gt; has made it more difficult for me as I need to have two explanations, one for those on a PC and another for those on a Mac.  Although they are very similar, it has been difficult for me as I do not use a Mac or have access to one for testing purposes.  Therefore, I end up figuring out differences on the fly.&lt;/p&gt;

&lt;h3&gt;Concluding thoughts&lt;/h3&gt;

&lt;p&gt;I hope to write more about my experiences using both gui systems for my class, but upon initial inspection of them now I definitely prefer &lt;em&gt;Deducer&lt;/em&gt;.  The package just has not completely won me over as little problems have made me use both packages in my class so far, primarily due to the error loading the &lt;em&gt;rJava&lt;/em&gt; package.&lt;/p&gt;

&lt;p&gt;Does anyone else have experience using one or the other in a class before?  I&#39;d enjoy hearing any stories using these or different gui systems for R.&lt;/p&gt;
</description>
				<pubDate>Mon, 03 Feb 2014 00:00:00 -0600</pubDate>
				<link>http://educate-r.org//2014/02/03/Rgui/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/02/03/Rgui/</guid>
			</item>
		
			<item>
				<title>When I use plyr/dplyr</title>
				<description>&lt;p&gt;My last post I talked about how I use the &lt;em&gt;data.table&lt;/em&gt; package for aggregating and removing duplicate observations.  Although I use the &lt;em&gt;data.table&lt;/em&gt; package quite often, there are many times when I use &lt;em&gt;plyr&lt;/em&gt; (and now the new &lt;em&gt;dplyr&lt;/em&gt;) package, primarily because of its easy, intuitive syntax.&lt;/p&gt;

&lt;h3&gt;Arrange&lt;/h3&gt;

&lt;p&gt;One of my personal favorite functions in the &lt;em&gt;plyr&lt;/em&gt; suite of basic functions is the &lt;em&gt;arrange&lt;/em&gt; function.  The base functions for sorting/ordering are more difficult to use.  Not to mention there have been many times that I have used the &lt;em&gt;base::sort&lt;/em&gt; function when I really need to use the &lt;em&gt;base::order&lt;/em&gt; function (sort to me is the word I think of first).  &lt;em&gt;arrange&lt;/em&gt; is great due to the easy, general syntax used for it as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(dplyr)
arrange(dataframe, col1, col2, col3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using the &lt;em&gt;base::order&lt;/em&gt; function, this needs to be done through the indexing operators and is not nearly as intuitive to me.  I always have to think for a second to get it right.  Here are two general examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;dataframe[order(dataframe$col1, dataframe$col2, dataframe$col3), ]
with(dataframe, dataframe[order(col1, col2, col3), ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both involve much more typing and are more difficult to read the code in my opinion.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Simple, Intuitive syntax&lt;/h3&gt;

&lt;p&gt;The other aspect of the &lt;em&gt;plyr&lt;/em&gt; (and &lt;em&gt;dplyr&lt;/em&gt;) suite of functions that keeps me coming back is their simple, intuitive syntax.  For example, if I am teaching a student how to aggregate or sort, &lt;em&gt;plyr&lt;/em&gt; is my go to package.  Easy to explain, easy to understand.  The common structure across all of the functions is brilliantly programmed and a standard for everyone else to replicate.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;New! Bonus use for &lt;em&gt;dplyr&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;The new ability to use the &lt;em&gt;chain&lt;/em&gt; function or alternatively the &lt;em&gt;%.%&lt;/em&gt; operator is a great addition to R.  One of the difficulties with code readability in R is the whenever functions are nested together.  By default R interprets from inside to out, not how most of us read written words let alone code.  The &lt;em&gt;chain&lt;/em&gt; function and &lt;em&gt;%.%&lt;/em&gt; operator allows the user to write the functions in the order they will be processed by R, therefore the code can read from left to right.&lt;/p&gt;

&lt;p&gt;Using the mtcars dataset, suppose we wanted to select specific columns, aggregate the miles per gallon and weight by the number of cylinders and automatic transmission status, and filter so we select the rows that have an average miles per gallon greater than 20.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(dplyr)
mtcars %.% 
  group_by(cyl, am) %.%
  select(mpg, cyl, wt, am) %.%
  summarise(avgmpg = mean(mpg), avgwt = mean(wt)) %.%
  filter(avgmpg &amp;gt; 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;## Source: local data frame [3 x 4]
## Groups: cyl
## 
##   cyl am avgmpg avgwt
## 1   4  0  22.90 2.935
## 2   4  1  28.07 2.042
## 3   6  1  20.57 2.755
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare the above syntax to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;filter(
  summarise(
    select(
      group_by(mtcars, cyl, am),
      mpg, cyl, wt, am),
    avgmpg = mean(mpg), avgwt = mean(wt)),
  avgmpg &amp;gt; 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;## Source: local data frame [3 x 4]
## Groups: cyl
## 
##   cyl am avgmpg avgwt
## 1   4  0  22.90 2.935
## 2   4  1  28.07 2.042
## 3   6  1  20.57 2.755
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both chunks give you the same result, however the first one is much easier to see the process taken to get to the end result.  Much easier to adapt the code to add/remove parts of it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I use both &lt;em&gt;data.table&lt;/em&gt; and &lt;em&gt;plyr&lt;/em&gt;/&lt;em&gt;dplyr&lt;/em&gt; packages.  All of these packages are a great tool for certian data problems.  If I want to write a single line of code to do a lot of manipulations I will tend to use &lt;em&gt;data.table&lt;/em&gt;.  However, if I am writing code where I am doing more exploration or if I am collaborating with others I tend to write my code using &lt;em&gt;plyr&lt;/em&gt;/&lt;em&gt;dplyr&lt;/em&gt;.  The versatility that both packages bring together in tandem is an excellent and powerful combination.  I do not have time to be a complete package elitest, the correct tool for the right data problem is the best solution for me.&lt;/p&gt;
</description>
				<pubDate>Fri, 24 Jan 2014 00:00:00 -0600</pubDate>
				<link>http://educate-r.org//2014/01/24/usePlyr/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/01/24/usePlyr/</guid>
			</item>
		
			<item>
				<title>Two of my favorite data.table features</title>
				<description>&lt;p&gt;When I started to use the &lt;em&gt;data.table&lt;/em&gt; package I was primarily using it to aggregate.  I had read about &lt;em&gt;data.table&lt;/em&gt; and its blazing speed compared to the other options from base or the &lt;em&gt;plyr&lt;/em&gt; package especially with large amounts of data.  As an example, I remember calculating averages or percentages while at Saint Paul Public Schools and while the calculations were running would walk away for 5 minutes to wait for them to finish.  When using &lt;em&gt;data.table&lt;/em&gt; to do the same calculations I didn&#39;t need to wait 5 minutes to see the calculated values.&lt;/p&gt;

&lt;p&gt;The speed of &lt;em&gt;data.table&lt;/em&gt; is publicized widely, however there are two features found in &lt;em&gt;data.table&lt;/em&gt; that are not talked about as frequently that I use very often.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Add aggregated variables to the raw data file&lt;/h2&gt;

&lt;p&gt;The ability to add aggregated variables to the raw data file can be very helpful in numerous data situations.  At Saint Paul Public Schools I used this feature to give differing levels of data to external clients requesting data.  I also used this feature when creating graphics.  Outside of the district world, this feature is extremely helpful when fitting linear mixed models with &lt;em&gt;lme4&lt;/em&gt; or &lt;em&gt;nlme&lt;/em&gt;.  Adding aggregated variables is needed if you want to add variables at any of the cluster levels (unless you calculate them on the fly with the &lt;strong&gt;I()&lt;/strong&gt; command).  Instead of creating a set of aggregated variables in a new data frame and merging back in, &lt;em&gt;data.table&lt;/em&gt; allows you to do it one one command.  Here is a small example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;# generate a small dataset
set.seed(1234)
smalldat &amp;lt;- data.frame(group1 = rep(1:2, each = 5), 
                       group2 = rep(c(&#39;a&#39;,&#39;b&#39;), times = 5), 
                       x = rnorm(10))

# convert to data.frame to data.table
library(data.table)
smalldat &amp;lt;- data.table(smalldat)

# convert aggregated variable into raw data file
smalldat[, aggGroup1 := mean(x), by = group1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;##     group1 group2       x aggGroup1
##  1:      1      a -1.2071   -0.3524
##  2:      1      b  0.2774   -0.3524
##  3:      1      a  1.0844   -0.3524
##  4:      1      b -2.3457   -0.3524
##  5:      1      a  0.4291   -0.3524
##  6:      2      b  0.5061   -0.4140
##  7:      2      a -0.5747   -0.4140
##  8:      2      b -0.5466   -0.4140
##  9:      2      a -0.5645   -0.4140
## 10:      2      b -0.8900   -0.4140
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;# aggregate with 2 variables
smalldat[, aggGroup1.2 := mean(x), by = list(group1, group2)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;##     group1 group2       x aggGroup1 aggGroup1.2
##  1:      1      a -1.2071   -0.3524      0.1022
##  2:      1      b  0.2774   -0.3524     -1.0341
##  3:      1      a  1.0844   -0.3524      0.1022
##  4:      1      b -2.3457   -0.3524     -1.0341
##  5:      1      a  0.4291   -0.3524      0.1022
##  6:      2      b  0.5061   -0.4140     -0.3102
##  7:      2      a -0.5747   -0.4140     -0.5696
##  8:      2      b -0.5466   -0.4140     -0.3102
##  9:      2      a -0.5645   -0.4140     -0.5696
## 10:      2      b -0.8900   -0.4140     -0.3102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key part of the syntax is the &lt;strong&gt;:=&lt;/strong&gt;, which tells &lt;em&gt;data.table&lt;/em&gt; to compute an aggregated variable and merge it back into the original data.  This is very compact syntax to create aggregated variables that are automatically placed within the original data.  The only drawback is the inability to create more than one aggregated variable at a time.  If I wanted to created the mean and the median of x for each level of the variable &lt;em&gt;group1&lt;/em&gt;, I would have to write two commands.  If a lot of variables need to be aggregated in this fashion, it may be more concise to create an aggregated data set and merge back into the original.  Below is an example of what I mean by aggregate then merge back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;library(plyr)

# create aggregated data
aggdat1 &amp;lt;- ddply(smalldat, .(group1), summarize,
                 aggGroup1plyr = mean(x))
aggdat12 &amp;lt;- ddply(smalldat, .(group1, group2), summarize, 
                aggGroup1.1plyr = mean(x))

# join back into data
smalldat &amp;lt;- join(smalldat, aggdat1, by = &#39;group1&#39;)
smalldat &amp;lt;- join(smalldat, aggdat12, by = c(&#39;group1&#39;, &#39;group2&#39;))

# print data
smalldat
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;##     group1 group2       x aggGroup1 aggGroup1.2 aggGroup1plyr
##  1:      1      a -1.2071   -0.3524      0.1022       -0.3524
##  2:      1      b  0.2774   -0.3524     -1.0341       -0.3524
##  3:      1      a  1.0844   -0.3524      0.1022       -0.3524
##  4:      1      b -2.3457   -0.3524     -1.0341       -0.3524
##  5:      1      a  0.4291   -0.3524      0.1022       -0.3524
##  6:      2      b  0.5061   -0.4140     -0.3102       -0.4140
##  7:      2      a -0.5747   -0.4140     -0.5696       -0.4140
##  8:      2      b -0.5466   -0.4140     -0.3102       -0.4140
##  9:      2      a -0.5645   -0.4140     -0.5696       -0.4140
## 10:      2      b -0.8900   -0.4140     -0.3102       -0.4140
##     aggGroup1.1plyr
##  1:          0.1022
##  2:         -1.0341
##  3:          0.1022
##  4:         -1.0341
##  5:          0.1022
##  6:         -0.3102
##  7:         -0.5696
##  8:         -0.3102
##  9:         -0.5696
## 10:         -0.3102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code using plyr likely won&#39;t take longer for R to run, however it does take more time to write out the code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Removing duplicate observations&lt;/h2&gt;

&lt;p&gt;For most situations, using &lt;em&gt;data.table&lt;/em&gt; has become my go to way to remove duplicate observations.  This is especially useful when it does not matter which value of the variables you want to keep in the final data set (e.g. when values of the variables are repeated).  The ability of &lt;em&gt;data.table&lt;/em&gt; to create keyed values makes it extremely easy to remove duplicate observations based on those keyed variables.&lt;/p&gt;

&lt;p&gt;Using the dataset created above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;# Set keys - this sorts the data based on these values
setkeyv(smalldat, c(&#39;group1&#39;,&#39;group2&#39;))

# keep unique observations (I also remove the variable x)
uniqdat &amp;lt;- subset(unique(smalldat), select = -x)

# print data
uniqdat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;r&quot;&gt;##    group1 group2 aggGroup1 aggGroup1.2 aggGroup1plyr aggGroup1.1plyr
## 1:      1      a   -0.3524      0.1022       -0.3524          0.1022
## 2:      1      b   -0.3524     -1.0341       -0.3524         -1.0341
## 3:      2      a   -0.4140     -0.5696       -0.4140         -0.5696
## 4:      2      b   -0.4140     -0.3102       -0.4140         -0.3102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above first sets two keys for the data.table.  The key acts as an identifier and the data are automatically sorted based on the key variables.  This is one of the reasons why the &lt;em&gt;data.table&lt;/em&gt; package can be so fast at doing many of its tasks.  Then unique observations are kept.  The &lt;em&gt;unique&lt;/em&gt; function in the &lt;em&gt;data.table&lt;/em&gt; package is similar to the same function in the base package, but when keys are defined for data.table, the &lt;em&gt;unique&lt;/em&gt; function automatically selects unique observations based on those key variables.&lt;/p&gt;

&lt;p&gt;For more complicated cases, I tend to use a combination of &lt;em&gt;order&lt;/em&gt; and &lt;em&gt;duplicated&lt;/em&gt; from base R, however for easy cases where observations are repeated on the variables I want to keep, this is a quick and easy way to remove duplicate observations.&lt;/p&gt;
</description>
				<pubDate>Mon, 06 Jan 2014 00:00:00 -0600</pubDate>
				<link>http://educate-r.org//2014/01/06/FavDataTable/</link>
				<guid isPermaLink="true">http://educate-r.org//2014/01/06/FavDataTable/</guid>
			</item>
		
	</channel>
</rss>
