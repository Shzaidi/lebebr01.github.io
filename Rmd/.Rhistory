x11 <- as.irt.pars(itempars11, common11, cat = cat11, poly.mod = pm11,
grp.names = c("gr3", "gr4", "gr5", "gr6", "gr7", "gr8"))
#weights.t <- as.weight(801)
out11 <- plink(x = x11, method = "SL", base.grp = 3, rescale = "SL",
control = list(rel.tol = 0.001), D = 1.7)
summary(out11)
length(c(17:31, 39:45))
common11 <- list(gr3.gr4 = matrix(c(10:20, 29:35, 1:11, 26:32), ncol = 2, dimnames = list(c(1:18), c("gr3", "gr4"))),
gr4.gr5 = matrix(c(12:25, 33:38, 1:14, 27:32), ncol = 2, dimnames = list(c(1:20), c("gr4", "gr5"))),
gr5.gr6 = matrix(c(15:26, 33:40, 1:12, 29:36), ncol = 2, dimnames = list(c(1:20), c("gr5", "gr6"))),
gr6.gr7 = matrix(c(13:28, 37:43, 1:16, 32:38), ncol = 2, dimnames = list(c(1:23), c("gr6", "gr7"))),
gr7.gr8 = matrix(c(17:31, 39:45, 1:15, 32:38), ncol = 2, dimnames = list(c(1:22), c("gr7", "gr8"))))
# length of each test
pm1 <- as.poly.mod(nrow(gr3_11@pars))
pm2 <- as.poly.mod(nrow(gr4_11@pars))
pm3 <- as.poly.mod(nrow(gr5_11@pars))
pm4 <- as.poly.mod(nrow(gr6_11@pars))
pm5 <- as.poly.mod(nrow(gr7_11@pars))
pm6 <- as.poly.mod(nrow(gr8_11@pars))
pm11 <- list(pm1, pm2, pm3, pm4, pm5, pm6)
# combine item parameters
itempars11 <- list(gr3 = gr3_11@pars, gr4 = gr4_11@pars, gr5 = gr5_11@pars,
gr6 = gr6_11@pars, gr7 = gr7_11@pars, gr8 = gr8_11@pars)
cat11 <- list(gr3_11@cat, gr4_11@cat, gr5_11@cat, gr6_11@cat, gr7_11@cat, gr8_11@cat)
# irt.pars object
x11 <- as.irt.pars(itempars11, common11, cat = cat11, poly.mod = pm11,
grp.names = c("gr3", "gr4", "gr5", "gr6", "gr7", "gr8"))
#weights.t <- as.weight(801)
out11 <- plink(x = x11, method = "SL", base.grp = 3, rescale = "SL",
control = list(rel.tol = 0.001), D = 1.7)
summary(out11)
rescalepars11 <- out11$pars@pars
avgpar11 <- sapply(rescalepars11, apply, 2, mean)
combinepars11 <- data.frame(do.call("rbind", rescalepars11))
setnames(combinepars11, c("a", "b", "c"))
combinepars11$grade <- rep(3:8, c(49, 54, 60, 65, 70, 74))
#write.csv(combinepars11, file = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/mathCalib/BL_rescaleItemPars11-12.csv")
# tcc
library(plink)
library(ggplot2)
library(magrittr)
library(tidyr)
# inputs a matrix of itempars, columns represent item parameters, rows forms.
tcc <- function(itempars, theta) {
t1 <- data.frame(drm(itempars, theta)@prob)
t1 %>%
gather(item, prob, item_1.1:item_6.1)
}
tccOvr11 <- tcc(t(avgpar11), seq(-4, 4, by = .01))
f <- ggplot(tccOvr11, aes(x = theta1, y = prob, color = factor(item))) + theme_bw()
f+ geom_line(size = 1) + scale_color_discrete("Grades", labels = c(3, 4, 5, 6, 7, 8)) +
labs(title = "11-12")
rescalepars11 <- out11$pars@pars
avgpar11 <- sapply(rescalepars11, apply, 2, mean)
combinepars11 <- data.frame(do.call("rbind", rescalepars11))
setnames(combinepars11, c("a", "b", "c"))
combinepars11$grade <- rep(3:8, c(35, 38, 40, 43, 45, 48))
#write.csv(combinepars11, file = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/mathCalib/BL_rescaleItemPars11-12.csv")
# tcc
library(plink)
library(ggplot2)
library(magrittr)
library(tidyr)
# inputs a matrix of itempars, columns represent item parameters, rows forms.
tcc <- function(itempars, theta) {
t1 <- data.frame(drm(itempars, theta)@prob)
t1 %>%
gather(item, prob, item_1.1:item_6.1)
}
tccOvr11 <- tcc(t(avgpar11), seq(-4, 4, by = .01))
f <- ggplot(tccOvr11, aes(x = theta1, y = prob, color = factor(item))) + theme_bw()
f+ geom_line(size = 1) + scale_color_discrete("Grades", labels = c(3, 4, 5, 6, 7, 8)) +
labs(title = "11-12")
avgpar11
source('Z:/special projects/Working Group 2/Calibration Next Generation/Form E/PGM/B/createBilogDataFunc.R')
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr3.txt",
widths = c(203, rep(1, 35), 281, 1),
col.names = c("misc", paste0("item", 1:35), "misc", "group"),
nitems = 35, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr3_12WE.txt")
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr4.txt",
widths = c(216, rep(1, 38), 265, 1),
col.names = c("misc", paste0("item", 1:38), "misc", "group"),
nitems = 38, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr4_12WE.txt")
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr5.txt",
widths = c(227, rep(1, 40), 252, 1),
col.names = c("misc", paste0("item", 1:40), "misc", "group"),
nitems = 40, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr5_12WE.txt")
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr6.txt",
widths = c(234, rep(1, 43), 242, 1),
col.names = c("misc", paste0("item", 1:43), "misc", "group"),
nitems = 43, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr6_12WE.txt")
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr7.txt",
widths = c(243, rep(1, 45), 231, 1),
col.names = c("misc", paste0("item", 1:45), "misc", "group"),
nitems = 45, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr7_12WE.txt")
createBilogData("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/Data/FormE_1213_gr8.txt",
widths = c(250, rep(1, 48), 221, 1),
col.names = c("misc", paste0("item", 1:48), "misc", "group"),
nitems = 48, subset = NULL,
outfile = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/gr8_12WE.txt")
gr3_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR3_12WE.PAR")
gr4_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR4_12WE.PAR")
gr5_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR5_12WE.PAR")
gr6_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR6_12WE.PAR")
gr7_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR7_12WE.PAR")
gr8_12 <- read.bilog("Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/weCalib/GR8_12WE.PAR")
# Link groups - using reference = 0 results
# common items
common12 <- list(gr3.gr4 = matrix(c(10:20, 29:35, 1:11, 26:32), ncol = 2, dimnames = list(c(1:18), c("gr3", "gr4"))),
gr4.gr5 = matrix(c(12:25, 33:38, 1:14, 27:32), ncol = 2, dimnames = list(c(1:20), c("gr4", "gr5"))),
gr5.gr6 = matrix(c(15:26, 33:40, 1:12, 29:36), ncol = 2, dimnames = list(c(1:20), c("gr5", "gr6"))),
gr6.gr7 = matrix(c(13:28, 37:43, 1:16, 32:38), ncol = 2, dimnames = list(c(1:23), c("gr6", "gr7"))),
gr7.gr8 = matrix(c(17:31, 39:45, 1:15, 32:38), ncol = 2, dimnames = list(c(1:22), c("gr7", "gr8"))))
# length of each test
pm1 <- as.poly.mod(nrow(gr3_12@pars))
pm2 <- as.poly.mod(nrow(gr4_12@pars))
pm3 <- as.poly.mod(nrow(gr5_12@pars))
pm4 <- as.poly.mod(nrow(gr6_12@pars))
pm5 <- as.poly.mod(nrow(gr7_12@pars))
pm6 <- as.poly.mod(nrow(gr8_12@pars))
pm12 <- list(pm1, pm2, pm3, pm4, pm5, pm6)
# combine item parameters
itempars12 <- list(gr3 = gr3_12@pars, gr4 = gr4_12@pars, gr5 = gr5_12@pars,
gr6 = gr6_12@pars, gr7 = gr7_12@pars, gr8 = gr8_12@pars)
cat12 <- list(gr3_12@cat, gr4_12@cat, gr5_12@cat, gr6_12@cat, gr7_12@cat, gr8_12@cat)
# irt.pars object
x12 <- as.irt.pars(itempars12, common12, cat = cat12, poly.mod = pm12,
grp.names = c("gr3", "gr4", "gr5", "gr6", "gr7", "gr8"))
#weights.t <- as.weight(801)
out12 <- plink(x = x12, method = "SL", base.grp = 3, rescale = "SL",
control = list(rel.tol = 0.001), D = 1.7)
summary(out12)
summary(out11)
rescalepars12 <- out12$pars@pars
avgpar12 <- sapply(rescalepars12, apply, 2, mean)
combinepars12 <- data.frame(do.call("rbind", rescalepars12))
setnames(combinepars12, c("a", "b", "c"))
combinepars12$grade <- rep(3:8, c(35, 38, 40, 43, 45, 48))
#write.csv(combinepars12, file = "Z:/special projects/Working Group 2/Calibration Next Generation/Form E/OUT/B/mathCalib/BL_rescaleItemPars12-13.csv")
# tcc
library(plink)
library(ggplot2)
library(magrittr)
library(tidyr)
# inputs a matrix of itempars, columns represent item parameters, rows forms.
tcc <- function(itempars, theta) {
t1 <- data.frame(drm(itempars, theta)@prob)
t1 %>%
gather(item, prob, item_1.1:item_6.1)
}
tccOvr12 <- tcc(t(avgpar12), seq(-4, 4, by = .01))
f <- ggplot(tccOvr12, aes(x = theta1, y = prob, color = factor(item))) + theme_bw()
f+ geom_line(size = 1) + scale_color_discrete("Grades", labels = c(3, 4, 5, 6, 7, 8)) +
labs(title = "12-13")
avgpar12
json_file <- "C:/Users/bleb/Downloads/Takeout/Location History/LocationHistory.json"
library(rjson)
#json_file <- "path/to/your/json/file"
json_data <- fromJSON(file = json_file)
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latR <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 4)))
latlong2$longR <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 5)))
library(rCharts)
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 8)
map3
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 4)
map3
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
map3
head(latlong2)
latlong2$latR <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3)))
latlong2$longR <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4)))
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latR <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3)))
latlong2$longR <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 4)))
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latR <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 3)))
latlong2$longR <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 4)))
head(latlong2)
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[ , len = length(latitudeE7), by = list(latR, longR)]
cnt <- latlong2[ , list(len = length(latitudeE7)), by = list(latR, longR)]
cnt
subset(cnt, len > 20)
subset(cnt, len > 100)
subset(cnt, len > 1000)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latR, longR)]
cnt <- cnt[len > 1000, ]
cnt
library(zipcode)
?zipcode
head(zipcode)
data(zipcode)
?zipcode
head(zipcode)
zipcode$latR <- round(latitude, 1)
zipcode$longR <- round(longitude, 1)
library(magrittr)
zipcode$latR <- zipcode %>% round(latitude, 1)
zipcode$longR <- zipcode %>% round(longitude, 1)
zipcode$latR <- with(zipcode, round(latitude, 1))
zipcode$longR <- with(zipcode, round(longitude, 1))
head(zipcode)
zipcode$latR <- with(zipcode, round(latitude, 2))
zipcode$longR <- with(zipcode, round(longitude, 2))
head(zipcode)
zipcode$latR <- with(zipcode, round(latitude, 1))
zipcode$longR <- with(zipcode, round(longitude, 1))
head(zipcode, n = 100)
library(dplyr)
??join
cnt <- left_join(cnt, zipcode, by = c("latR", "longR"))
cnt
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latR <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 6)))
latlong2$longR <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 7)))
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latR, longR)]
cnt <- cnt[len > 1000, ]
cnt
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latitude <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 6)))
latlong2$longitude <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 7)))
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latR, longR)]
cnt <- cnt[len > 1000, ]
library(zipcode)
data(zipcode)
library(dplyr)
cnt <- left_join(cnt, zipcode, by = c("latitude", "longitude"))
head(zipcode)
head(cnt)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
cnt <- cnt[len > 1000, ]
cnt <- left_join(cnt, zipcode, by = c("latitude", "longitude"))
cnt
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latitude <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 4)))
latlong2$longitude <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 5)))
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
cnt <- cnt[len > 1000, ]
library(zipcode)
data(zipcode)
zipcode$longR <- with(zipcode, round(longitude, 2))
zipcode$latR <- with(zipcode, round(latitude, 2))
library(dplyr)
cnt <- left_join(cnt, zipcode, by = c("latitude", "longitude"))
cnt
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
cnt <- cnt[len > 1000, ]
cnt
zipcode$longitude <- with(zipcode, round(longitude, 2))
zipcode$latitude <- with(zipcode, round(latitude, 2))
cnt <- left_join(cnt, zipcode, by = c("latitude", "longitude"))
cnt
cnt <- cnt[len > 1000, ]
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
cnt <- cnt[len > 1000, ]
cnt
cnt['latitude']
cnt['latitude', with = FALSE]
cnt[1, latitude]
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(cnt)){
map3$circle(c(latlong2[i, latitude], latlong2[i, longitude]), fillOpacity: 0.01)
}
for(i in 1:nrow(cnt)){
map3$circle(c(latlong2[i, latitude], latlong2[i, longitude]), fillOpacity = 0.01)
}
map3
map3
print(map3)
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(latlong2)){
map3$circle(c(latlong2[i, latitude], latlong2[i, longitude]), fillOpacity = 0.1)
}
map3
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(cnt)){
map3$circle(c(cnt[i, latitude], cnt[i, longitude]), fillOpacity = 0.1)
}
map3
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(cnt)){
map3$marker(c(cnt[i, latitude], cnt[i, longitude]))
}
map3
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(cnt)){
map3$circle(c(cnt[i, latitude], cnt[i, longitude]))
}
map3
map3$print()
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:10){
map3$marker(c(cnt[i, latitude], cnt[i, longitude]))
}
map3$print()
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:10){
map3$circle2(c(cnt[i, latitude], cnt[i, longitude]))
}
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:10){
map3$marker(c(cnt[i, latitude], cnt[i, longitude]))
}
map3
for(i in 1:10){
map3$circle(c(cnt[i, latitude], cnt[i, longitude]))
}
map3$print
map3$print()
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:100){
map3$marker(c(cnt[i, latitude], cnt[i, longitude]))
}
map3
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latitude <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 5)))
latlong2$longitude <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 6)))
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
map3 <- Leaflet$new()
map3$setView(c(41.6667, -91.5333), zoom = 5)
for(i in 1:nrow(cnt)){
map3$marker(c(cnt[i, latitude], cnt[i, longitude]))
}
map3
json_file <- "C:/Users/bleb/Downloads/Takeout/Location History/LocationHistory.json"
library(rjson)
#json_file <- "path/to/your/json/file"
json_data <- fromJSON(file = json_file)
latlong <- data.frame(do.call("rbind", json_data[[2]]))
latlong2 <- subset(latlong, select = c(latitudeE7, longitudeE7))
latlong2$latitude <- as.numeric(paste0(substr(as.character(latlong2$latitudeE7), 1, 2),
".", substr(as.character(latlong2$latitudeE7), 3, 5)))
latlong2$longitude <- as.numeric(paste0(substr(as.character(latlong2$longitudeE7), 1, 3),
".", substr(as.character(latlong2$longitudeE7), 4, 6)))
library(data.table)
latlong2 <- data.table(latlong2)
cnt <- latlong2[, list(len = length(latitudeE7)), by = list(latitude, longitude)]
#cnt <- cnt[len > 1000, ]
#library(zipcode)
#data(zipcode)
#zipcode$longitude <- with(zipcode, round(longitude, 2))
#zipcode$latitude <- with(zipcode, round(latitude, 2))
#library(dplyr)
#cnt <- left_join(cnt, zipcode, by = c("latitude", "longitude"))
library(rCharts)
cnt_list <- toJSONArray2(cnt, json = F)
toGeoJSON(cnt_list, lat = 'latitude', lon = 'longitude')
?toGeoJson
?toGeoJSON
library(devtools)
devtools::install_github('leafletR', 'chgrl')
library(leafletR)
# load example data (Fiji Earthquakes)
data(quakes)
# store data in GeoJSON file (just a subset here)
q.dat <- toGeoJSON(data=quakes[1:99,], dest=tempdir(), name="quakes")
# make style based on quake magnitude
q.style <- styleGrad(prop="mag", breaks=seq(4, 6.5, by=0.5),
style.val=rev(heat.colors(5)), leg="Richter Magnitude",
fill.alpha=0.7, rad=8)
# create map
q.map <- leaflet(data=q.dat, dest=tempdir(), title="Fiji Earthquakes",
base.map="mqsat", style=q.style, popup="mag")
q.mpa
q.map
browseURL(q.map)
# more than one data set
park <- system.file(package="leafletR", "files", "park_sk.geojson")
peak <- toGeoJSON(system.file(package="leafletR", "files", "peak_sk.kmz"),
dest=tempdir())
sty.1 <- styleSingle(col="green", fill="green")
sty.2 <- styleSingle(col="brown", fill="brown", rad=3)
map <- leaflet(data=list(park, peak), dest=tempdir(),
style=list(sty.1, sty.2), popup=list("*", "Name"))
map <- leaflet(data=list(National.Parks=park, Peaks=peak), dest=tempdir(),
style=list(sty.1, sty.2), popup=list("*", "Name"))  # names in legend
park[[1]]
peak[[1]]
str(park)
cnt_list[[1]]
toGeoJSON(cnt_list, lat = 'latitude', lon = 'longitude')[[1]]
toGeoJSON(cnt_list, lat = 'latitude', lon = 'longitude')
data(quakes)
head(quakes)
head(latlong2)
?mle
??mle
install.packages("bbmle")
library(bblme)
library(bbmle)
x <- 0:10
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
d <- data.frame(x,y)
## in general it is best practice to use the `data' argument,
## but variables can also be drawn from the global environment
LL <- function(ymax=15, xhalf=6)
-sum(stats::dpois(y, lambda=ymax/(1+x/xhalf), log=TRUE))
## uses default parameters of LLmle2 11
(fit <- mle2(LL))
fit1F <- mle2(LL, fixed=list(xhalf=6))
coef(fit1F)
coef(fit1F,exclude.fixed=TRUE)
mle2
library(EstCRM)
EstCRMitem
library(simReg)
fixed <- ~ 1 + act + diff + numCourse + act:numCourse
fixed.param <- c(2, 4, 1, 3.5, 2)
cov.param <- list(mean = c(0, 0, 0), sd = c(4, 3, 3), var.type = c("single", "single", "single"))
n <- 150
errorVar <- 3
err.dist <- "norm"
temp.single <- sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n, errorVar = errorVar, err.dist = err.dist, data.str = "single")
head(temp.single)
fixed <- ~1 + time + diff + act + time:act
random <- ~1 + time + diff
fixed.param <- c(4, 2, 6, 2.3, 7)
random.param <- c(7, 4, 2)
cov.param <- list(mean = c(0, 0), sd = c(1.5, 4), var.type = c("lvl1", "lvl2"))
n <- 150
p <- 30
errorVar <- 4
randCor <- 0
rand.dist <- "norm"
err.dist <- "norm"
serCor <- "ID"
serCorVal <- NULL
data.str <- "long"
temp.long <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor, serCorVal, data.str)
head(temp.long)
fixed <- ~1 + time + diff + act + time:act
random <- ~1 + time + diff
fixed.param <- c(4, 2, 6, 2.3, 7)
random.param <- c(7, 4, 2)
cov.param <- list(mean = c(0, 0), sd = c(1.5, 4), var.type = c("lvl1", "lvl2"))
n <- 150
p <- 30
errorVar <- 4
randCor <- c(0, .1, 0)
rand.dist <- "norm"
err.dist <- "norm"
serCor <- "ID"
serCorVal <- NULL
data.str <- "long"
temp.long <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor, serCorVal, data.str)
head(temp.long)
library(lme4)
lmer(sim.data ~ 1 + time + diff + act + time:act + (1 + time + diff | clustID),
data = temp.long)
randCor = .5
temp.long <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor, serCorVal, data.str)
library(lme4)
lmer(sim.data ~ 1 + time + diff + act + time:act + (1 + time + diff | clustID),
data = temp.long)
setwd("C:/Users/bleb/Copy/lebebr01.github.io/Rmd")
library(knitr)
knit("2014-10-01-simReg.Rmd")
