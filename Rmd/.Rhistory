foreach(t = 1:500, .packages = "simReg") %dopar% {
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[i], errorVar = errorVar, err.dist = err.dist[j], data.str = "single", num.dist)
}
stopCluster(cl)
cl <- makeCluster(2, type = "SOCK")
clusterSetupRNG(cl, seed = 987)
registerDoSNOW(cl)
temp.single <- foreach(i=1:length(n), .packages = "simReg") %:%
foreach(j = 1:length(err.dist), .packages = 'simReg') %:%
foreach(t = 1:500, .packages = "simReg") %dopar% {
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[i], errorVar = errorVar, err.dist = err.dist[j], data.str = "single", num.dist = num.dist)
}
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[1], errorVar = errorVar, err.dist = err.dist[4], data.str = "single", num.dist = num.dist)
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[1], errorVar = errorVar, err.dist = err.dist[3], data.str = "single", num.dist = num.dist)
?rbimod
err <- rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2)
err
sim.err.single(errorVar, n, err.dist = "bimod", num.dist)
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[1], errorVar = errorVar, err.dist = err.dist[3], data.str = "single", num.dist = 2)
sim.reg(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[1], errorVar = errorVar, err.dist = err.dist[4], data.str = "single", num.dist = 2)
sim.reg.single(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[1], errorVar = errorVar, err.dist = err.dist[4], data.str = "single", num.dist = 2)
stopCluster(cl)
cl <- makeCluster(2, type = "SOCK")
clusterSetupRNG(cl, seed = 987)
registerDoSNOW(cl)
temp.single <- foreach(i=1:length(n), .packages = "simReg") %:%
foreach(j = 1:length(err.dist), .packages = 'simReg') %:%
foreach(t = 1:500, .packages = "simReg") %dopar% {
sim.reg.single(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n[i], errorVar = errorVar, err.dist = err.dist[j], data.str = "single", num.dist = 2)
}
ffEst <- foreach(i = 1:length(n), .combine = rbind) %:%
foreach(j = 1:length(err.dist), .combine = rbind) %:%
foreach(t = 1:500, .combine = rbind) %dopar% {
coef(summary(lm(sim.data ~ 1 + act + diff + numCourse + act:numCourse,
data = temp.single[[i]][[j]][[t]])))[,1:2]
}
stopCluster(cl)
head(ffEst)
ffEst <- as.data.frame(ffEst)
setnames(ffEst, c('Est', 'stdErr'))
str(ffEst)
5*4*10*500
options(scipen = 999)
5*4*10*500
4*10*500
ffEst$terms <- rep(c('b0','b1', 'b2', 'b3', 'b4'), times = 20000)
5*500*4
ffEst$n <- rep(seq(50, 500, by = 50), each = 10000)
cl <- makeCluster(2, type = "SOCK")
registerDoSNOW(cl)
ffEst <- foreach(i = 1:length(n), .combine = rbind) %:%
foreach(j = 1:length(err.dist), .combine = rbind) %:%
foreach(t = 1:500, .combine = rbind) %dopar% {
cbind(coef(summary(lm(sim.data ~ 1 + act + diff + numCourse + act:numCourse,
data = temp.single[[i]][[j]][[t]])))[,1:2],
n = n[i], err.dist = err.dist[j])
}
stopCluster(cl)
head(ffEst)
ffEst <- as.data.frame(ffEst)
str(ffEst)
cl <- makeCluster(2, type = "SOCK")
registerDoSNOW(cl)
ffEst <- foreach(i = 1:length(n), .combine = rbind) %:%
foreach(j = 1:length(err.dist), .combine = rbind) %:%
foreach(t = 1:500, .combine = rbind) %dopar% {
data.frame(coef(summary(lm(sim.data ~ 1 + act + diff + numCourse + act:numCourse,
data = temp.single[[i]][[j]][[t]])))[,1:2],
n = n[i], err.dist = err.dist[j])
}
stopCluster(cl)
head(ffEst)
str(ffEst)
setnames(ffEst, c('Est', 'stdErr', 'n', 'err.dist'))
str(ffEst)
ffEst$terms <- rep(c('b0','b1', 'b2', 'b3', 'b4'), times = 20000)
ffEst$param <- rep(fixed.param, times = 20000)
head(ffEst)
ffEst$relBias <- with(ffEst, (Est - fixed.param)/fixed.param)
ffEst$testStat <- with(ffEst, (Est - fixed.param)/stdErr)
ffEst$t1e <- with(ffEst, ifelse(abs(testStat) > 1.96, 1, 0))
head(ffEst)
ffest[, list(avgRB = mean(relBias), avgt1e = mean(t1e)), by = list(n, err.dist, terms)]
ffEst <- data.table(ffEst)
# average results
ffest[, list(avgRB = mean(relBias), avgt1e = mean(t1e)), by = list(n, err.dist, terms)]
ffEst[, list(avgRB = mean(relBias), avgt1e = mean(t1e)), by = list(n, err.dist, terms)]
n
?lm
lm(relBias ~ n * factor(err.dist) * factor(terms), data = ffEst, subset = n == c(100, 300))
summary(lm(relBias ~ n * factor(err.dist) * factor(terms), data = ffEst, subset = n == c(100, 300)))
mod.sub <- lm(relBias ~ n * factor(err.dist) * factor(terms), data = ffEst,
subset = n == c(100, 300))
mod.full <- lm(relBias ~ factor(n) * factor(err.dist) * factor(terms, data = ffEst))
mod.full <- lm(relBias ~ factor(n) * factor(err.dist) * factor(terms), data = ffEst)
anova(mod.full)
anova(mod.sub)
predict(mod.sub)
head(predict(mod.sub))
?predict
head(predict(mod.sub), newdata = n = c(50, 150, 200, 250, 350, 400, 450, 500))
new <- data.frame(n = c(50, 150, 200, 250, 350, 400, 450, 500))
head(predict(mod.sub), newdata = new)
new
new <- data.frame(n = c(50, 150, 200, 250, 350, 400, 450, 500), err.dist = rep("norm", 8), terms = rep("b0", 8))
head(predict(mod.sub), newdata = new)
predict(mod.sub, newdata = new)
new <- data.frame(n = c(50, 150, 200, 250, 350, 400, 450, 500))
predict(mod.sub, newdata = new)
summary(mod.sub)
summary(mod.full)
p <- ggplot(ffEst, aes(x = n, y =relBias))
p + geom_point()
library(ggplot2)
p <- ggplot(ffEst, aes(x = n, y =relBias))
p + geom_point()
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172)
p <- ggplot(subset(ffEst, err.dist == "norm" & terms == "b0", aes(x = n, y =relBias))
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172)
p <- ggplot(subset(ffEst, err.dist == "norm" & terms == "b0"), aes(x = n, y =relBias))
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172)
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172) +
theme_bw()
ffEst[err.dist == "norm" & terms == "b0", avgRB = mean(relBias), by = n]
ffEst[err.dist == "norm" & terms == "b0", list(avgRB = mean(relBias)), by = n]
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 3)
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 3, geom = "point")
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 5, geom = "point")
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172, size = 2) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
p + geom_point() + geom_abline(intercept = .01396685, slope = -0.00005172, size = 1) +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
p + geom_point() +
geom_abline(intercept = .01396685, slope = -0.00005172, size = 1, linetype = 'dashed') +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
p <- ggplot(subset(ffEst, err.dist == "bimod" & terms == "b0"), aes(x = n, y =relBias))
p + geom_point() +
geom_abline(intercept = .01396685, slope = -0.00005172, size = 1, linetype = 'dashed') +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
p <- ggplot(subset(ffEst, err.dist == "bimod" & terms == "b0"), aes(x = n, y =relBias))
p + geom_point() +
geom_abline(intercept = .00263413, slope = -0.00000604, size = 1, linetype = 'dashed') +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
newd <- data.frame(n = c(50, 150, 200, 250, 350, 400, 450, 500),
err.dist = rep("norm", 8), terms = rep("b0", 8))
predict(mod.sub, newdata = newd)
newd <- data.frame(n = c(50,100, 150, 200, 250,300, 350, 400, 450, 500),
err.dist = rep("norm", 10), terms = rep("b0", 10))
predict(mod.sub, newdata = newd)
avgs <- ffEst[, list(avgRB = mean(relBias), avgt1e = mean(t1e)),
by = list(n, err.dist, terms)]
avgs
t1e.sub <- lm(avgt1e ~ n * factor(err.dist) * factor(terms), data = ffEst,
subset = n == c(100, 300))
t1e.sub <- lm(avgt1e ~ n * factor(err.dist) * factor(terms), data = avgs,
subset = n == c(100, 300))
summary(t1e.sub)
t1e.sub <- lm(avgt1e ~ n * factor(err.dist) * factor(terms) - n:factor(err.dist):factor(terms), data = avgs,
subset = n == c(100, 300))
summary(t1e.sub)
anova(t1e.sub)
t1e.sub <- lm(avgt1e ~ n + factor(err.dist) + factor(terms), data = avgs,
subset = n == c(100, 300))
t1e.sub
t1e.sub <- lm(avgt1e ~ n + factor(err.dist) + factor(terms), data = avgs,
summary(t1e.sub)
t1e.sub <- lm(avgt1e ~ n * factor(err.dist) * factor(terms), data = avgs)
t1e.sub
summary(t1e.sub)
mod.sub <- lm(relBias ~ n * factor(err.dist) * factor(terms), data = ffEst)
summary(mod.sub)
summary(mod.full)
p <- ggplot(subset(ffEst, err.dist == "norm" & terms == "b0"), aes(x = n, y =relBias))
p + geom_point() +
geom_abline(intercept = .0002904978, slope = -0.0000039695, size = 1, linetype = 'dashed') +
theme_bw() + stat_summary(fun.y = mean, color = "red", size = 4, geom = "point") +
stat_summary(fun.y = median, color = "green", size = 4, geom = "point")
library(simReg)
?rbimod
plot(rbimod(50, 0, .64, 2))
plot(rbimod(50, c(-1, 1), .64, 2))
rbimod
sim.reg.single
error.sim.single
err <- rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2)
num.dist = 2
errorVar = .64
num.dist = 2
err <- rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2)
n = 50
err <- rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2)
err
plot(err)
mean(err)
?vector
meanerr <- vector(length = 10000)
str(meanerr)
meanerr <- vector(mode = "integer", length = 10000)
str(meanerr)
for(i in 1:10000){
meanerr[i] <- rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2)
}
warnings
warnings()
for(i in 1:10000){
meanerr[i] <- mean(rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2))
}
mean(meanerr)
plot(meanerr)
summary(meanerr)
for(i in 1:10000){
meanerr[i] <- var(rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar/2))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] <- var(rbimod(n, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)*chol(errorVar))
}
summary(meanerr)
library(simReg)
##Setting population parameters
fixed <- ~ 1 + time + actmath + time:actmath
fixed.param <- c(1.8,-.6,.05,.02)
random <- ~ 1 + time
random.param <- c(.5, .05)
cov.param <- list(c(0,4.904))
errorVar <- 0.64
w.var <- 2
randCor <- 0
n <- c(30,50)
p <- c(6,12)
rand.dist <- c("norm", "lap", "chi", "bimod")
err.dist <-  c("norm", "lap", "chi", "bimod")
serCor <- "ID"
serCorVal <- 0
data.str <- "long"
num.dist <- 2
meanerr <- vector(mode = "integer", length = 10000)
for(i in 1:10000){
var(((rbimod(p, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)
*chol(errorVar))))
}
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = rep(0, num.dist), var = rep(1, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-1, 1), var = rep(1, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-1, 1), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.8, 0.8), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
plot(density(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar)))))
for(i in 1:10000){
meanerr[i] = mean(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = mean(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
p
p = 6
for(i in 1:10000){
meanerr[i] = mean(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.5, num.dist), num.dist)
*chol(errorVar))))
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.45, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.4, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.9, 0.9), var = rep(.35, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.35, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
p = 12
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.35, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
p = 200
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.35, num.dist), num.dist)
*chol(errorVar))))
}
summary(meanerr)
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.35, num.dist), num.dist)))
)
p = 6
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.35, num.dist), num.dist))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.85, 0.85), var = rep(.25, num.dist), num.dist))))
}
summary(meanerr)
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.75, 0.75), var = rep(.25, num.dist), num.dist))))
}
summary(meanerr)
p = 12
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.75, 0.75), var = rep(.25, num.dist), num.dist))))
}
summary(meanerr)
p = 100
for(i in 1:10000){
meanerr[i] = var(((rbimod(p, mean = c(-0.75, 0.75), var = rep(.25, num.dist), num.dist))))
}
summary(meanerr)
plot(density(((rbimod(p, mean = c(-0.75, 0.75), var = rep(.25, num.dist), num.dist)))))
?findInterval
x <- 2:18
v <- c(5, 10, 15) # create two bins [5,10) and [10,15)
cbind(x, findInterval(x, v)
)
library(simReg)
fixed <- ~ 1 + time + actmath + time:actmath
fixed.param <- c(1.8,-.6,.05,.02)
random <- ~ 1 + time
random.param <- c(.5, .05)
cov.param <- list(c(0,4.904))
errorVar <- 0.64
w.var <- 2
randCor <- 0
n <- c(30)
p <- c(6)
library(devtools)
install_github("simReg", username = "lebebr01")
library(simReg)
?sim.reg
library(devtools)
install_github("simReg", username = "lebebr01")
library(simReg)
?sim.reg
sim.reg
library(devtools)
install_github("simReg", username = "lebebr01")
library(simReg)
?sim.reg
sim.reg
##Setting population parameters
fixed <- ~ 1 + time + actmath + time:actmath
fixed.param <- c(1.8,-.6,.05,.02)
random <- ~ 1 + time
random.param <- c(.5, .05)
cov.param <- list(c(0,4.904))
errorVar <- 0.64
w.var <- 2
randCor <- 0
n <- c(30)
p <- c(6)
rand.dist <- c("norm", "lap", "chi", "bimod")
err.dist <-  c("norm", "lap", "chi", "bimod")
serCor <- "ID"
serCorVal <- 0
data.str <- "long"
num.dist <- 2
var.cond <- as.data.frame(expand.grid(rand.dist, err.dist))
colnames(var.cond) <- c("rand.dist", "err.dist")
##Simulating the datasets
library(doSNOW)
library(rlecuyer)
cl <- makeCluster(2, type = "SOCK")
clusterSetupRNG(cl, seed = 1919)
registerDoSNOW(cl)
modData <- foreach(i=1:16) %:%
foreach(k=1:300, .packages = "simReg") %dopar% {
sim.reg(fixed,random,fixed.param,random.param,
w.var, cov.param, n, p,
errorVar, randCor, var.cond[i,3], var.cond[i,4],
serCor, serCorVal, data.str, num.dist, mean = c(-.75, .75), var = c(0.25, 0.25))
}
install.packages("magittr")
install.packages("magrittr")
install.packages("EstCRM")
library(EstCRM)
EstCRM
EstCRMitem
library(lme4)
?lmer
Vignettes
vignettes()
Vignettes()
??vig
browseVignettes()
fm1 <- lme(weight ~ Time * Diet, data=BodyWeight, ~ Time | Rat)
Variogram(fm1, form = ~ Time | Rat, nint = 10, robust = TRUE)
library(nlme)
fm1 <- lme(weight ~ Time * Diet, data=BodyWeight, ~ Time | Rat)
Variogram(fm1, form = ~ Time | Rat, nint = 10, robust = TRUE)
library(hightlightHTML)
tags <- c("#bgred {background-color: red;}", "#bgblue {background-color: blue;}",
"colgold {color: gold;}", "bgblack {background-color: black; color: white;}")
library(highlightHTML)
highlightHTML(input = "C:/Users/bleb/Dropbox/highlightHTML/inst/examples/mwe.html",)
highlightHTML(input = "C:/Users/bleb/Dropbox/highlightHTML/inst/examples/mwe.html",
output = "C:/Users/bleb/Desktop/mwe.html", updateCSS = TRUE, tags = tags, browse = TRUE)
library(knitr)
?knitr
?knit
library(highlightHTML)
tags <- c("#bgred {background-color: red;}", "#bgblue {background-color: blue;}",
"colgold {color: gold;}", "bgblack {background-color: black; color: white;}")
highlightHTML(input = "C:/Users/bleb/Dropbox/highlightHTML/inst/examples/mwe.html",
output = "C:/Users/bleb/Desktop/mwe.html", tags = tags)
highlightHTML(input = "C:/Users/bleb/Dropbox/highlightHTML/inst/examples/mwe.html",
output = "C:/Users/bleb/Desktop/mwe.html", tags = tags)
library(highlightHTML)
tags <- c("#bgred {background-color: red;}", "#bgblue {background-color: blue;}",
"#colgold {color: gold;}", "#bgblack {background-color: black; color: white;}")
highlightHTML(input = "C:/Users/bleb/Dropbox/highlightHTML/inst/examples/mwe.html",
output = "C:/Users/bleb/Desktop/mwe.html", tags = tags)
library(knitr)
setwd("C:/Users/bleb/Copy/lebebr01.github.io/RMD")
knit("2014-07-30-highlightHTML.Rmd")
