summary(Xmat)
library(simReg)
# Simulate nested data (population)
n <- 10000
p <- 45
errorVar <- 4
randCor <- 0
rand.dist <- "norm"
err.dist <- "norm"
serCor <- "ID"
serCorVal <- NULL
data.str <- "cross"
fixed <- ~ 1 + gender.f + white.f + frl.f + numMcourses + cGPA + perNWhite + perFRL
random <- ~ 1
fixed.param <- c(1, 2, 2, 4, 1, 1, 2, 2)
random.param <- c(8)
cov.param <- list(mean = c(3, 3, 75, 35), sd = c(.75, 1, 8, 5),
var.type = c("lvl1", "lvl1", "lvl2", "lvl2"))
fact.vars <- list(numlevels = c(2, 2, 2), var.type = c("lvl1", "lvl1", "lvl1"))
# Simulate data
pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars)
head(pop.data)
# Simulate nested data (population)
n <- 100
p <- 45
errorVar <- 4
randCor <- 0
rand.dist <- "norm"
err.dist <- "norm"
serCor <- "ID"
serCorVal <- NULL
data.str <- "cross"
fixed <- ~ 1 + gender.f + white.f + frl.f + numMcourses + cGPA + perNWhite + perFRL
random <- ~ 1
fixed.param <- c(1, 2, 2, 4, 1, 1, 2, 2)
random.param <- c(8)
cov.param <- list(mean = c(3, 3, 75, 35), sd = c(.75, 1, 8, 5),
var.type = c("lvl1", "lvl1", "lvl2", "lvl2"))
fact.vars <- list(numlevels = c(2, 2, 2), var.type = c("lvl1", "lvl1", "lvl1"))
# Simulate data
pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars)
head(pop.data)
tail(pop.data)
10000*45
# Simulate nested data (population)
n <- 1000
p <- 45
errorVar <- 4
randCor <- 0
rand.dist <- "norm"
err.dist <- "norm"
serCor <- "ID"
serCorVal <- NULL
data.str <- "cross"
fixed <- ~ 1 + gender.f + white.f + frl.f + numMcourses + cGPA + perNWhite + perFRL
random <- ~ 1
fixed.param <- c(1, 2, 2, 4, 1, 1, 2, 2)
random.param <- c(8)
cov.param <- list(mean = c(3, 3, 75, 35), sd = c(.75, 1, 8, 5),
var.type = c("lvl1", "lvl1", "lvl2", "lvl2"))
fact.vars <- list(numlevels = c(2, 2
system.time(pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars))
install.packages("microbenchmark")
library(microbenchmark)
op <- microbenchmark(pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars))
n <- 100
op <- microbenchmark(pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars))
print(op)
n <- 1000
pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars)
system.time(pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars))
n <- 10000
system.time(pop.data <- sim.reg(fixed, random, fixed.param, random.param, cov.param,
n, p, errorVar, randCor, rand.dist, err.dist, serCor,
serCorVal, data.str, fact.vars))
358/60
tail(pop.data)
head(pop.data)
save(pop.data, file = "C:\Users\bleb\Copy\JournalArticlesInProgress\bootstrap\popData.rda")
save(pop.data, file = "C:/Users/bleb/Copy/JournalArticlesInProgress/bootstrap/popData.rda")
library(ltm)
?ltm
library(plink)
data()
data(package = "plink")
head(act.mcm)
?act.mcm
?TK07
data(package = "lmt")
data(package = "ltm")
library(plink)
?read.bilog
sciparam <- read.table("C:/Users/bleb/Desktop/40 High School Science Items.csv")
sciparam
sciparam <- read.table("C:/Users/bleb/Desktop/40 High School Science Items.csv", header = TRUE)
sciparam
?plink
head(KB04)
cat <- rep(2, 36)
pm <- as.poly.mod(36)
x <- as.irt.pars(KB04$pars, KB04$common, cat = list(cat, cat),
poly.mod = list(pm, pm), grp.names = c("new", "old"))
out <- plink(x)
summary(out)
out
link.ability(out)
?link.ability
link.pars(out)
pm <- as.poly.mod(36)
x <- as.irt.pars(KB04$pars, KB04$common, cat=list(rep(2,36),rep(2,36)),
poly.mod=list(pm,pm), exclude=list(27,NA))
out <- plink(x, rescale="MS", base.grp=2, D=1.7)
summary(out, descrip=TRUE)
pars.out <- link.pars(out)
pars.out
pars <- TK07$pars
common <- TK07$common
cat <- list(rep(2,26),rep(2,34),rep(2,37),rep(2,40),rep(2,41),rep(2,43))
pm1 <- as.poly.mod(26)
pm2 <- as.poly.mod(34)
pm3 <- as.poly.mod(37)
pm4 <- as.poly.mod(40)
pm5 <- as.poly.mod(41)
pm6 <- as.poly.mod(43)
pm <- list(pm1, pm2, pm3, pm4, pm5, pm6)
x <- as.irt.pars(pars, common, cat, pm,
grp.names=paste("grade",3:8,sep=""))
out <- plink(x)
summary(out)
constants <- link.con(out)
constatns
constants
link.pars(out)
link.ability(out)
plink(x, rescale = "SL")
out <- plink(x, rescale = "SL")
link.ability(out)
out <- plink(x, rescale = "SL", base.grp = 3, D=1.7)
link.ability(out)
theta <- rnorm(100) # In practice, estimated theta values would be used
pm <- as.poly.mod(60, "mcm", 1:60)
x <- as.irt.pars(act.mcm, common=matrix(1:60,60,2), cat=list(rep(6,60),
rep(6,60)), poly.mod=list(pm,pm))
out <- plink(x, ability=list(theta,theta), rescale="HB")
pars.out <- link.pars(out)
ability.out <- link.ability(out)
summary(out, descrip=TRUE)
pars.out
x
install.packages("irtoys")
library("irtoys", lib.loc="~/R/win-library/3.1")
?eas
?est
resp <- read.table("C:/Users/bleb/Desktop/EXAMPL05.txt")
head(resp)
resp[1,3]
resp <- read.table("C:/Users/bleb/Desktop/EXAMPL05.txt", colclasses = "character")
resp <- read.table("C:/Users/bleb/Desktop/EXAMPL05.txt", colClasses = "character")
head(resp)
strsplit(resp$v3, "")
strsplit(resp$V3, "")
as.numeric(unlist(strsplit(resp$V3, "")))
as.vector(as.numeric(unlist(strsplit(resp$V3, ""))))
a1 <- read.table("C:/users/bleb/Desktop/EXAMPL05.txt",
colClasses = c('numeric', 'numeric', 'character'))
str(a1)
head(a1)
resp <- cbind(resp, read.fwf(textConnection(resp$V3), widths=rep(1, nchar(resp$V3)[1]),
colClasses = 'numeric', header=FALSE))
head(resp)
resp <- read.table("C:/users/bleb/Desktop/EXAMPL05.txt",
colClasses = c('numeric', 'numeric', 'character'), sep = "")
head(resp)
coaches <- read.csv("C:/Users/bleb/Dropbox/cfbFootball/Data/coaches.csv")
coaches$bowlElig <- ifelse(coaches$Win > 5, 1, 0)
coaches <- subset(coaches, Year > 1949)
coaches$decade <- with(coaches, ifelse(Year < 1960, 1, ifelse(
Year < 1970 & Year > 1959, 2, ifelse(Year < 1980 & Year > 1969, 3, ifelse(
Year < 1990 & Year > 1979, 4, ifelse(Year < 2000 & Year > 1989, 5, ifelse(
Year < 2010 & Year > 1999, 6, 7)))))))
table(coaches$decade)
head(coaches)
library(data.table)
)
coaches <- data.table(coaches)
nrow(coaches)
ybyCoach <- unique(ybyCoach, by = c('Year', 'Team', 'coach'))
coaches <- unique(coaches, by = c('Year', 'Team', 'coach'))
nrow(coaches)
coaches[, numGames := Win + Loss + Tie, ]
coaches <- coaches[i = numGames > 2]
nrow(coaches)
library(ggplot2)
table(coaches$PF)
table(coaches$PA)
coaches$PFbin <- with(coaches, ifelse(PF < 101, 1, ifelse(
PF < 201 & PF > 100, 2, ifelse(PF < 301 & PF > 200, 3, ifelse(
PF < 401 & PF > 300, 4, ifelse(PF < 501 & PF > 400, 5, 6))))))
coaches$PAbin <- with(coaches, ifelse(PA < 101, 1, ifelse(
PA < 201 & PA > 100, 2, ifelse(PA < 301 & PA > 200, 3, ifelse(
PA < 401 & PA > 300, 4, ifelse(PA < 501 & PA > 400, 5, 6))))))
table(coaches$PFbin)
table(coaches$PAbin)
be <- coaches[, list(wPF = mean(bowlElig)), by = PFbin]
be
be <- coaches[order(PFbin), list(wPF = mean(bowlElig)), by = PFbin]
be
bePA <- coaches[order(PAbin), list(wPA = mean(bowlElig)), by = PAbin]
bePA
table(coaches$Delta)
?cut
cut(coaches$Delta, breaks = 10)
table(cut(coaches$Delta, breaks = 10))
table(cut(coaches$Delta, breaks = c(-250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250)))
table(cut(coaches$Delta, breaks = c(-600, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 600)))
coaches$Deltabin <- cut(coaches$Delta, breaks = c(-600, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 600))
```
coaches$Deltabin <- factor(cut(coaches$Delta, breaks = c(-600, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 600)))
table(coaches$Deltabin)
beDelta <- coaches[order(Deltabin), list(bpct = mean(bowlElig)), by = Deltabin]
beDelta
library(data.table)
coaches <- read.csv("C:/Users/bleb/Dropbox/cfbFootball/Data/coaches.csv")
coaches$bowlElig <- ifelse(coaches$Win > 5, 1, 0)
coaches <- subset(coaches, Year > 1949)
coaches$decade <- with(coaches, ifelse(Year < 1960, 1, ifelse(
Year < 1970 & Year > 1959, 2, ifelse(Year < 1980 & Year > 1969, 3, ifelse(
Year < 1990 & Year > 1979, 4, ifelse(Year < 2000 & Year > 1989, 5, ifelse(
Year < 2010 & Year > 1999, 6, 7)))))))
coaches <- data.table(coaches)
coaches <- unique(coaches, by = c('Year', 'Team', 'coach'))
# removing coaches with less than 2 games for team
coaches[, numGames := Win + Loss + Tie, ]
coaches <- coaches[i = numGames > 2]
# binning PF and PA
coaches$PFbin <- with(coaches, ifelse(PF < 101, 1, ifelse(
PF < 201 & PF > 100, 2, ifelse(PF < 301 & PF > 200, 3, ifelse(
PF < 401 & PF > 300, 4, ifelse(PF < 501 & PF > 400, 5, 6))))))
coaches$PAbin <- with(coaches, ifelse(PA < 101, 1, ifelse(
PA < 201 & PA > 100, 2, ifelse(PA < 301 & PA > 200, 3, ifelse(
PA < 401 & PA > 300, 4, ifelse(PA < 501 & PA > 400, 5, 6))))))
coaches$Deltabin <- factor(cut(coaches$Delta, breaks = c(-600, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 600)))
library(ggplot2)
bePF <- coaches[order(PFbin), list(bpct = mean(bowlElig)), by = PFbin]
bePF$type
bePA <- coaches[order(PAbin), list(bpct = mean(bowlElig)), by = PAbin]
beDelta <- coaches[order(Deltabin), list(bpct = mean(bowlElig)), by = Deltabin]
bePF
beDelta
bePA
library(devtools)
?use_travis
??travis
??use_travis
?use.travis
update.packages(ask=FALSE)
?devtools::use_travis
?add_travis
library(ggplot2)
bePF
ggplot(bePF, aes(x = PFbin, y = bpct)) + theme_bw() + geom_point() + geom_line()
nrow(coaches)
?cut
?cut2
table(cut_number(coaches$PF, 100))
table(cut_number(coaches$PF, 150))
table(as.numeric(cut_number(coaches$PF, 150)))
coaches$PFbin2 <- cut_number(coaches$PF, 150)
coaches$PAbin2 <- cut_number(coaches$PA, 150)
coaches$Deltabin2 <- cut_number(coaches$Delta, 150)
bePF2 <- coaches[order(PFbin2), list(bpct = mean(bowlElig)), by = PFbin2]
bePF2
ggplot(bePF2, aes(x = PFbin2, y = bpct)) + theme_bw() + geom_point() + geom_line()
str(bePF2)
str(cut_number(coaches$PA, 150))
levels(cut_number(coaches$PA, 150))
gsub("\[|\]|(", "",levels(cut_number(coaches$PA, 150)))
gsub("\\[|\\]|(", "",levels(cut_number(coaches$PA, 150)))
gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePF2
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
temp
as.numeric(gsub(",", ":", temp))
gsub(",", ":", temp)
gsub(",", "+", temp)
strsplit(",", temp)
?strsplit
strsplit(temp, ",")
as.numeric(strsplit(temp, ","))
as.numeric(unlist(strsplit(temp, ",")))
?lapply
temp2 <- strsplit(temp, ",")
lapply(temp2, as.numeric)
library(magittr)
library("magrittr", lib.loc="~/R/win-library/3.1")
temp2 %>% lapply(as.numeric)
temp2 %>% lapply(as.numeric) %>% lapply(mean)
temp2 %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2 <- temp2 %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2 <- coaches[order(PFbin2), list(bpct = mean(bowlElig)), by = PFbin2]
bePF2$avgPF <- temp2 %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2
bePF2 <- coaches[order(PFbin2), list(bpct = mean(bowlElig)), by = PFbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePF2$avgPF <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
geom_line(data = bePF2, aes(x = avgPF, y = bpct))
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2, aes(x = avgPF, y = bpct))
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2, aes(x = avgPF, y = bpct), method = "loess")
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2, aes(x = avgPF, y = bpct))
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2, aes(x = avgPF, y = bpct), se = FALSE)
p + geom_point(data = bePF2, aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE)
p + geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE)
p + geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 5)
p + geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct)) +
stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 3)
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 3) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct))
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 1.5) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct))
bePA2 <- coaches[order(PAbin2), list(bpct = mean(bowlElig)), by = PAbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePA2$avgPA <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePA2
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 1.5) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct)) +
scale_y_continuous(expand = c(0,0))
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 1.5) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct), color = "red")
bePF2$group <- "PF"
bePA2$group <- "PA"
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct), se = FALSE, size = 1.5) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500))
?subset
ovrBE <- rbind(subset(bePF2, select = -PFbin2), subset(bePA2, select = -PAbin2))
library(magrittr)
bePF2 <- coaches[order(PFbin2), list(bpct = mean(bowlElig)), by = PFbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePF2$avg <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2$group <- "PF"
bePA2 <- coaches[order(PAbin2), list(bpct = mean(bowlElig)), by = PAbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePA2$avg <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePA2$group <- "PA"
# combine
ovrBE <- rbind(subset(bePF2, select = -PFbin2), subset(bePA2, select = -PAbin2))
head(ovrBE)
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + stat_smooth(data = bePF2[-150], aes(x = avgPF, y = bpct, color = group), se = FALSE, size = 1.5) +
geom_point(data = bePF2[-150], aes(x=avgPF, y = bpct, color = group)) +
bePF2[-150]
bePF2 <- bePF2[-150]
bePA2 <- bePA2[-150]
ovrBE <- rbind(subset(bePF2, select = -PFbin2), subset(bePA2, select = -PAbin2))
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + stat_smooth(data = ovrBE, aes(x = avgPF, y = bpct, color = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avgPF, y = bpct, color = group))
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, color = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group))
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500))
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Set1")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Set2")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous(breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous("Points", limits = c(0, 600), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2", labels = c("Points Scores", "Points Against")) +
ylab("Bowl Eligibility Likelihood")
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group)) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2", labels = c("Points Scored", "Points Against")) +
ylab("Bowl Eligibility Likelihood") +
scale_linetype_discrete(labels = c("Points Scored", "Points Against"))
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group), size = 3.5) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2", labels = c("Points Scored", "Points Against")) +
ylab("Bowl Eligibility Likelihood") +
scale_linetype_discrete(labels = c("Points Scored", "Points Against"))
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group), se = FALSE, size = 1.5) +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group), size = 2.5) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2", labels = c("Points Scored", "Points Against")) +
ylab("Bowl Eligibility Likelihood") +
scale_linetype_discrete(labels = c("Points Scored", "Points Against"))
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group),
se = FALSE, size = 1.5, method = "loess") +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group), size = 2) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2", labels = c("Points Scored", "Points Against")) +
ylab("Bowl Eligibility Likelihood") +
scale_linetype_discrete(labels = c("Points Scored", "Points Against"))
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
bePF2 <- coaches[order(PFbin2), list(bpct = mean(bowlElig)), by = PFbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePF2$avg <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePF2$group <- "Points Scored"
bePF2 <- bePF2[-150]
bePA2 <- coaches[order(PAbin2), list(bpct = mean(bowlElig)), by = PAbin2]
temp <- gsub("\\[|\\]|\\(", "",levels(cut_number(coaches$PA, 150)))
bePA2$avg <- temp %>% strsplit(",") %>% lapply(as.numeric) %>% lapply(mean) %>% unlist
bePA2$group <- "Points Against"
bePA2 <- bePA2[-150]
# combine
ovrBE <- rbind(subset(bePF2, select = -PFbin2), subset(bePA2, select = -PAbin2))
p <- ggplot(coaches, aes(x = PF)) + theme_bw()
p + stat_smooth(data = ovrBE, aes(x = avg, y = bpct, linetype = group),
se = FALSE, size = 1.5, method = "loess") +
geom_point(data = ovrBE, aes(x=avg, y = bpct, color = group), size = 2) +
scale_x_continuous("Points", limits = c(0, 500), breaks = c(0, 100, 200, 300, 400, 500)) +
scale_color_brewer(palette = "Dark2") +
ylab("Bowl Eligibility Likelihood")
library(rCharts)
h1 <- hPlot(x = "avg", y = "bpct", group = "group", data = ovrBE)
h1$yAxis(title = list(text = "Bowl Eligibility Likelihood"), min = 0, max = 1, tickInterval = .1)
h1$xAxis(title = list(text = "Points"),
min = 0, max = 500, tickInterval = 100)
h1$legend(verticalAlign = "top", align = "right", layout = "vertical", title = list(text = "Group"))
h1$plotOptions(series = list(lineWidth = 4))
h1$print
h1
ovrBE$avg <- round(ovrBE$avg, 3)
h1 <- hPlot(x = "avg", y = "bpct", group = "group", data = ovrBE)
h1$yAxis(title = list(text = "Bowl Eligibility Likelihood"), min = 0, max = 1, tickInterval = .1)
h1$xAxis(title = list(text = "Points"),
min = 0, max = 500, tickInterval = 100)
h1$legend(verticalAlign = "top", align = "right", layout = "vertical", title = list(text = "Group"))
h1$plotOptions(series = list(lineWidth = 4))
h1$print('chart1', include_assets = TRUE, cdn = TRUE)
h1
?hPlot
h1
ovrBE
ovrBE$bpct <- round(ovrBE$bpct, 3)
h1 <- hPlot(x = "avg", y = "bpct", group = "group", data = ovrBE)
h1$yAxis(title = list(text = "Bowl Eligibility Likelihood"), min = 0, max = 1, tickInterval = .1)
h1$xAxis(title = list(text = "Points"),
min = 0, max = 500, tickInterval = 100)
h1$legend(verticalAlign = "top", align = "right", layout = "vertical", title = list(text = "Group"))
h1$plotOptions(series = list(lineWidth = 4))
h1
?loess
ovrBE.lo <- loess(bpct ~ avg, ovrBE)
ovrBE$lo <- loess(bpct ~ avg, ovrBE)
ovrBE.lo
summary(ovrBE.lo)
ovrBE$lo <- loess(bpct ~ avg + group, ovrBE)
?stat_smooth
h1 <- hPlot(x = "avg", y = "bpct", group = "group", data = ovrBE)
h1$yAxis(title = list(text = "Bowl Eligibility Likelihood"), min = 0, max = 1, tickInterval = .1)
h1$xAxis(title = list(text = "Points"),
min = 0, max = 500, tickInterval = 100)
h1$legend(verticalAlign = "top", align = "right", layout = "vertical", title = list(text = "Group"))
h1$plotOptions(series = list(lineWidth = 2))
h1
library(knitr)
setwd("C:/Users/bleb/Copy/lebebr01.github.io/RMD")
knit("2014-09-05-winpct.Rmd")
